<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [usb\usb.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image usb\usb.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Dec 19 19:14:05 2023
<BR><P>
<H3>Maximum Stack Usage =       2016 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; lv_port_disp_init &rArr; LCD_Init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[149]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[18a]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18a]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[2e1]">mymemset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e1]">mymemset</a><BR>
 <LI><a href="#[1ce]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ce]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[1e7]">OUTLINED_FUNCTION_1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e8]">refr_obj</a><BR>
 <LI><a href="#[505]">lv_obj_redraw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e8]">refr_obj</a><BR>
 <LI><a href="#[52c]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52c]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[2b8]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b8]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[3ad]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ad]">layout_update_core</a><BR>
 <LI><a href="#[351]">lv_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[351]">lv_strcmp</a><BR>
 <LI><a href="#[50d]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50d]">refresh_children_style</a><BR>
 <LI><a href="#[4c3]">lv_obj_is_group_def</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c3]">lv_obj_is_group_def</a><BR>
 <LI><a href="#[2db]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2db]">apply_theme</a><BR>
 <LI><a href="#[2dc]">apply_theme_recursion</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2dc]">apply_theme_recursion</a><BR>
 <LI><a href="#[4c1]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c1]">lv_obj_construct</a><BR>
 <LI><a href="#[a7]">lv_obj_transform_point</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">lv_obj_transform_point</a><BR>
 <LI><a href="#[2e0]">mymemcpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e0]">mymemcpy</a><BR>
 <LI><a href="#[4cb]">lv_obj_is_editable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4cb]">lv_obj_is_editable</a><BR>
 <LI><a href="#[4c4]">obj_delete_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c4]">obj_delete_core</a><BR>
 <LI><a href="#[2cb]">_lv_vsnprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cb]">_lv_vsnprintf</a><BR>
 <LI><a href="#[269]">mem_cpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[269]">mem_cpy</a><BR>
 <LI><a href="#[322]">mem_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[322]">mem_set</a><BR>
 <LI><a href="#[510]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[510]">report_style_change_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">HAL_Delay</a> from stm32f1xx_hal.o(.text.HAL_Delay) referenced from lcd_init.o(.text.LCD_Init)
 <LI><a href="#[45]">HAL_GPIO_Init</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[44]">HAL_GPIO_WritePin</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">LCD_WR_DATA</a> from lcd_init.o(.text.LCD_WR_DATA) referenced from lcd_init.o(.text.LCD_Area_Set)
 <LI><a href="#[43]">LCD_WR_DATA8</a> from lcd_init.o(.text.LCD_WR_DATA8) referenced from lcd_init.o(.text.LCD_Init)
 <LI><a href="#[42]">LCD_WR_REG</a> from lcd_init.o(.text.LCD_WR_REG) referenced from lcd_init.o(.text.LCD_Init)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">SPI2_ReadWriteByte</a> from spi.o(.text.SPI2_ReadWriteByte) referenced from mmc_sd.o(.text.SD_SendCmd)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f1xx_it.o(.text.TIM4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[eb]">USER_initialize</a> from user_diskio.o(.text.USER_initialize) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[ef]">USER_ioctl</a> from user_diskio.o(.text.USER_ioctl) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[ed]">USER_read</a> from user_diskio.o(.text.USER_read) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[ec]">USER_status</a> from user_diskio.o(.text.USER_status) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[ee]">USER_write</a> from user_diskio.o(.text.USER_write) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[4b]">_at_printf</a> from at.o(.text._at_printf) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[e4]">_at_user_AT_LED_off</a> from at_user.o(.text._at_user_AT_LED_off) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[e3]">_at_user_AT_LED_on</a> from at_user.o(.text._at_user_AT_LED_on) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[53]">_checkString</a> from at.o(.text._checkString) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[54]">_cutString</a> from at.o(.text._cutString) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[4e]">_errorToString</a> from at.o(.text._errorToString) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[52]">_getParamMaxNum</a> from at.o(.text._getParamMaxNum) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[51]">_getStateTable</a> from at.o(.text._getStateTable) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[3e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4d]">_handle</a> from at.o(.text._handle) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[4c]">_handleAuto</a> from at.o(.text._handleAuto) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[8b]">_lv_display_refr_timer</a> from lv_refr.o(.text._lv_display_refr_timer) referenced from lv_display.o(.text.lv_display_create)
 <LI><a href="#[9d]">_lv_ll_get_head</a> from lv_ll.o(.text._lv_ll_get_head) referenced from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[9e]">_lv_ll_get_next</a> from lv_ll.o(.text._lv_ll_get_next) referenced from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[a0]">_lv_ll_get_prev</a> from lv_ll.o(.text._lv_ll_get_prev) referenced from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[9f]">_lv_ll_get_tail</a> from lv_ll.o(.text._lv_ll_get_tail) referenced from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[bd]">_out_buffer</a> from lv_sprintf_builtin.o(.text._out_buffer) referenced from lv_sprintf_builtin.o(.text.lv_vsnprintf)
 <LI><a href="#[6e]">_out_null</a> from lv_sprintf_builtin.o(.text._out_null) referenced from lv_sprintf_builtin.o(.text._lv_vsnprintf)
 <LI><a href="#[4a]">_print</a> from at.o(.text._print) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[48]">_printSet</a> from at.o(.text._printSet) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[49]">_println</a> from at.o(.text._println) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[47]">_sendInfor</a> from at.o(.text._sendInfor) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[50]">_setInputDevice</a> from at.o(.text._setInputDevice) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[4f]">_setOutputDevice</a> from at.o(.text._setOutputDevice) referenced from at.o(.text._At_Config_no_readString)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[37]">_snputc</a> from _snputc.o(.text) referenced from _vsnprintf.o(.text)
 <LI><a href="#[5d]">add_cb</a> from lv_cache_builtin.o(.text.add_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[55]">anim_timer</a> from lv_anim.o(.text.anim_timer) referenced from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[e5]">at_user_AT</a> from at_user.o(.text.at_user_AT) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[e8]">at_user_AT_LED</a> from at_user.o(.text.at_user_AT_LED) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[e6]">at_user_AT_List</a> from at_user.o(.text.at_user_AT_List) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[e7]">at_user_AT_Reboot</a> from at_user.o(.text.at_user_AT_Reboot) referenced from at_user.o(.data..L_MergedGlobals)
 <LI><a href="#[71]">at_user_sdev_available</a> from at_user.o(.text.at_user_sdev_available) referenced from at_user.o(.text.at_user_init)
 <LI><a href="#[70]">at_user_sdev_print</a> from at_user.o(.text.at_user_sdev_print) referenced from at_user.o(.text.at_user_init)
 <LI><a href="#[6f]">at_user_sdev_read</a> from at_user.o(.text.at_user_sdev_read) referenced from at_user.o(.text.at_user_init)
 <LI><a href="#[64]">buf_align</a> from lv_draw_buf.o(.text.buf_align) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[61]">buf_clear</a> from lv_draw_buf.o(.text.buf_clear) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[60]">buf_copy</a> from lv_draw_buf.o(.text.buf_copy) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[65]">buf_free</a> from lv_draw_buf.o(.text.buf_free) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[62]">buf_go_to_xy</a> from lv_draw_buf.o(.text.buf_go_to_xy) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[66]">buf_malloc</a> from lv_draw_buf.o(.text.buf_malloc) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
 <LI><a href="#[89]">cache_invalidate_cb</a> from lv_bin_decoder.o(.text.cache_invalidate_cb) referenced from lv_bin_decoder.o(.text.lv_bin_decoder_open)
 <LI><a href="#[c1]">convert_speed_to_time</a> from lv_anim.o(.text.convert_speed_to_time) referenced from lv_anim.o(.text.resolve_time)
 <LI><a href="#[ba]">dark_color_filter_cb</a> from lv_theme_default.o(.text.dark_color_filter_cb) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[bc]">default_walker</a> from lv_tlsf.o(.text.default_walker) referenced from lv_tlsf.o(.text.lv_tlsf_walk_pool)
 <LI><a href="#[8f]">disp_event_cb</a> from lv_display.o(.text.disp_event_cb) referenced from lv_display.o(.text.lv_display_create)
 <LI><a href="#[ae]">disp_flush</a> from lv_port_disp.o(.text.disp_flush) referenced from lv_port_disp.o(.text.lv_port_disp_init)
 <LI><a href="#[93]">dispatch</a> from lv_draw_sw.o(.text.dispatch) referenced from lv_draw_sw.o(.text.lv_draw_sw_init)
 <LI><a href="#[94]">draw_letter_cb</a> from lv_draw_sw_letter.o(.text.draw_letter_cb) referenced from lv_draw_sw_letter.o(.text.lv_draw_sw_label)
 <LI><a href="#[56]">empty_cb</a> from lv_cache_builtin.o(.text.empty_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[92]">evaluate</a> from lv_draw_sw.o(.text.evaluate) referenced from lv_draw_sw.o(.text.lv_draw_sw_init)
 <LI><a href="#[5c]">find_by_data_cb</a> from lv_cache_builtin.o(.text.find_by_data_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[5b]">find_by_src_cb</a> from lv_cache_builtin.o(.text.find_by_src_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[99]">flex_update</a> from lv_flex.o(.text.flex_update) referenced from lv_flex.o(.text.lv_flex_init)
 <LI><a href="#[3b]">fputc</a> from usart.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[59]">get_data_cb</a> from lv_cache_builtin.o(.text.get_data_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[b9]">grey_filter_cb</a> from lv_theme_default.o(.text.grey_filter_cb) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[9c]">grid_update</a> from lv_grid.o(.text.grid_update) referenced from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[5a]">invalidate_cb</a> from lv_cache_builtin.o(.text.invalidate_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[3d]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[9a]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[9b]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[ab]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[ab]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced from lv_roller.o(.text.refr_position)
 <LI><a href="#[7f]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_anim.o(.text.lv_anim_init)
 <LI><a href="#[7f]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_style.o(.text.lv_style_transition_dsc_init)
 <LI><a href="#[7f]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[c7]">lv_arc_constructor</a> from lv_arc.o(.text.lv_arc_constructor) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[c8]">lv_arc_event</a> from lv_arc.o(.text.lv_arc_event) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[77]">lv_area_get_height</a> from lv_flex.o(.text.lv_area_get_height) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[81]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[5f]">lv_area_get_size</a> from lv_area.o(.text.lv_area_get_size) referenced from lv_refr.o(.text._lv_display_refr_timer)
 <LI><a href="#[76]">lv_area_get_width</a> from lv_flex.o(.text.lv_area_get_width) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[82]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[78]">lv_area_set_height</a> from lv_area.o(.text.lv_area_set_height) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[79]">lv_area_set_width</a> from lv_area.o(.text.lv_area_set_width) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[80]">lv_async_timer_cb</a> from lv_async.o(.text.lv_async_timer_cb) referenced from lv_async.o(.text.lv_async_call_cancel)
 <LI><a href="#[83]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[84]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[c9]">lv_bar_constructor</a> from lv_bar.o(.text.lv_bar_constructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[ca]">lv_bar_destructor</a> from lv_bar.o(.text.lv_bar_destructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[cb]">lv_bar_event</a> from lv_bar.o(.text.lv_bar_event) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[88]">lv_bin_decoder_close</a> from lv_bin_decoder.o(.text.lv_bin_decoder_close) referenced from lv_bin_decoder.o(.text.lv_bin_decoder_init)
 <LI><a href="#[87]">lv_bin_decoder_get_area</a> from lv_bin_decoder.o(.text.lv_bin_decoder_get_area) referenced from lv_bin_decoder.o(.text.lv_bin_decoder_init)
 <LI><a href="#[85]">lv_bin_decoder_info</a> from lv_bin_decoder.o(.text.lv_bin_decoder_info) referenced from lv_bin_decoder.o(.text.lv_bin_decoder_init)
 <LI><a href="#[86]">lv_bin_decoder_open</a> from lv_bin_decoder.o(.text.lv_bin_decoder_open) referenced from lv_bin_decoder.o(.text.lv_bin_decoder_init)
 <LI><a href="#[91]">lv_color_16_16_mix</a> from lv_draw_sw_blend_to_rgb565.o(.text.lv_color_16_16_mix) referenced from lv_draw_sw_blend_to_rgb565.o(.text.lv_draw_sw_blend_color_to_rgb565)
 <LI><a href="#[c6]">lv_color_16_16_mix</a> from lv_draw_sw_transform.o(.text.lv_color_16_16_mix) referenced from lv_draw_sw_transform.o(.text.transform_rgb565a8)
 <LI><a href="#[a3]">lv_color_brightness</a> from lv_led.o(.text.lv_color_brightness) referenced from lv_led.o(.text.lv_led_event)
 <LI><a href="#[a4]">lv_color_mix</a> from lv_led.o(.text.lv_color_mix) referenced from lv_led.o(.text.lv_led_event)
 <LI><a href="#[95]">lv_draw_mask_angle</a> from lv_draw_sw_mask.o(.text.lv_draw_mask_angle) referenced from lv_draw_sw_mask.o(.text.lv_draw_sw_mask_angle_init)
 <LI><a href="#[96]">lv_draw_mask_line</a> from lv_draw_sw_mask.o(.text.lv_draw_mask_line) referenced from lv_draw_sw_mask.o(.text.lv_draw_sw_mask_line_points_init)
 <LI><a href="#[97]">lv_draw_mask_radius</a> from lv_draw_sw_mask.o(.text.lv_draw_mask_radius) referenced from lv_draw_sw_mask.o(.text.lv_draw_sw_mask_radius_init)
 <LI><a href="#[98]">lv_draw_sw_mask_free_param</a> from lv_draw_sw_mask.o(.text.lv_draw_sw_mask_free_param) referenced from lv_draw_sw_triangle.o(.text.lv_draw_sw_triangle)
 <LI><a href="#[cc]">lv_dropdown_constructor</a> from lv_dropdown.o(.text.lv_dropdown_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[cd]">lv_dropdown_destructor</a> from lv_dropdown.o(.text.lv_dropdown_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[ce]">lv_dropdown_event</a> from lv_dropdown.o(.text.lv_dropdown_event) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[d1]">lv_dropdown_list_event</a> from lv_dropdown.o(.text.lv_dropdown_list_event) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[cf]">lv_dropdownlist_constructor</a> from lv_dropdown.o(.text.lv_dropdownlist_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[d0]">lv_dropdownlist_destructor</a> from lv_dropdown.o(.text.lv_dropdownlist_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[d3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[d2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[7e]">lv_free</a> from lv_mem.o(.text.lv_free) referenced from lv_grid.o(.text.grid_update)
 <LI><a href="#[d4]">lv_label_constructor</a> from lv_label.o(.text.lv_label_constructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[d5]">lv_label_destructor</a> from lv_label.o(.text.lv_label_destructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[d6]">lv_label_event</a> from lv_label.o(.text.lv_label_event) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[d7]">lv_led_constructor</a> from lv_led.o(.text.lv_led_constructor) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[d8]">lv_led_event</a> from lv_led.o(.text.lv_led_event) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[d9]">lv_line_constructor</a> from lv_line.o(.text.lv_line_constructor) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[da]">lv_line_event</a> from lv_line.o(.text.lv_line_event) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[a6]">lv_mem_walker</a> from lv_mem_core_builtin.o(.text.lv_mem_walker) referenced from lv_mem_core_builtin.o(.text.lv_mem_monitor_core)
 <LI><a href="#[8a]">lv_memzero</a> from lv_draw_sw_blend_to_argb8888.o(.text.lv_memzero) referenced from lv_draw_sw_blend_to_argb8888.o(.text.lv_color_mix_with_alpha_cache_init)
 <LI><a href="#[c5]">lv_obj_add_style</a> from lv_obj_style.o(.text.lv_obj_add_style) referenced from lv_theme_default.o(.text.theme_apply)
 <LI><a href="#[db]">lv_obj_constructor</a> from lv_obj.o(.text.lv_obj_constructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[8c]">lv_obj_create</a> from lv_obj.o(.text.lv_obj_create) referenced from lv_display.o(.text.lv_display_create)
 <LI><a href="#[bf]">lv_obj_delete_async_cb</a> from lv_obj_tree.o(.text.lv_obj_delete_async_cb) referenced from lv_obj_tree.o(.text.obj_delete_core)
 <LI><a href="#[dc]">lv_obj_destructor</a> from lv_obj.o(.text.lv_obj_destructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[dd]">lv_obj_event</a> from lv_obj.o(.text.lv_obj_event) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[7b]">lv_obj_get_height_with_margin</a> from lv_flex.o(.text.lv_obj_get_height_with_margin) referenced from lv_flex.o(.text.find_track_end)
 <LI><a href="#[73]">lv_obj_get_style_margin_bottom</a> from lv_flex.o(.text.lv_obj_get_style_margin_bottom) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[74]">lv_obj_get_style_margin_left</a> from lv_flex.o(.text.lv_obj_get_style_margin_left) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[72]">lv_obj_get_style_margin_right</a> from lv_flex.o(.text.lv_obj_get_style_margin_right) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[75]">lv_obj_get_style_margin_top</a> from lv_flex.o(.text.lv_obj_get_style_margin_top) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_flex.o(.text.flex_update)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_arc.o(.text.knob_get_extra_size)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_refr.o(.text.refr_obj)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_obj_pos.o(.text.transform_point)
 <LI><a href="#[7c]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_roller.o(.text.transform_vect_recursive)
 <LI><a href="#[7a]">lv_obj_get_width_with_margin</a> from lv_flex.o(.text.lv_obj_get_width_with_margin) referenced from lv_flex.o(.text.find_track_end)
 <LI><a href="#[8d]">lv_obj_remove_style_all</a> from lv_obj_style.o(.text.lv_obj_remove_style_all) referenced from lv_display.o(.text.lv_display_create)
 <LI><a href="#[a8]">lv_obj_send_event</a> from lv_obj_event.o(.text.lv_obj_send_event) referenced from lv_refr.o(.text.lv_obj_redraw)
 <LI><a href="#[a8]">lv_obj_send_event</a> from lv_obj_event.o(.text.lv_obj_send_event) referenced from lv_obj_tree.o(.text.lv_obj_set_parent)
 <LI><a href="#[a8]">lv_obj_send_event</a> from lv_obj_event.o(.text.lv_obj_send_event) referenced from lv_refr.o(.text.refr_obj_and_children)
 <LI><a href="#[8e]">lv_obj_set_scrollbar_mode</a> from lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode) referenced from lv_display.o(.text.lv_display_create)
 <LI><a href="#[a7]">lv_obj_transform_point</a> from lv_obj_pos.o(.text.lv_obj_transform_point) referenced from lv_obj_pos.o(.text.lv_obj_get_transformed_area)
 <LI><a href="#[5e]">lv_obj_update_layout</a> from lv_obj_pos.o(.text.lv_obj_update_layout) referenced from lv_refr.o(.text._lv_display_refr_timer)
 <LI><a href="#[67]">lv_point_transform</a> from lv_area.o(.text.lv_point_transform) referenced from lv_image_buf.o(.text._lv_image_buf_get_transformed_area)
 <LI><a href="#[de]">lv_roller_constructor</a> from lv_roller.o(.text.lv_roller_constructor) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[df]">lv_roller_event</a> from lv_roller.o(.text.lv_roller_event) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[e0]">lv_roller_label_event</a> from lv_roller.o(.text.lv_roller_label_event) referenced from lv_roller.o(.rodata.lv_roller_label_class)
 <LI><a href="#[e1]">lv_slider_constructor</a> from lv_slider.o(.text.lv_slider_constructor) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[e2]">lv_slider_event</a> from lv_slider.o(.text.lv_slider_event) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[a9]">lv_style_prop_has_flag</a> from lv_obj_style.o(.text.lv_style_prop_has_flag) referenced from lv_obj_style.o(.text.lv_obj_refresh_style)
 <LI><a href="#[b3]">lv_style_set_bg_color</a> from lv_style_gen.o(.text.lv_style_set_bg_color) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[b5]">lv_style_set_bg_opa</a> from lv_style_gen.o(.text.lv_style_set_bg_opa) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[bb]">lv_style_set_pad_all</a> from lv_theme_default.o(.text.lv_style_set_pad_all) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[b7]">lv_style_set_pad_column</a> from lv_style_gen.o(.text.lv_style_set_pad_column) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[b8]">lv_style_set_pad_row</a> from lv_style_gen.o(.text.lv_style_set_pad_row) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[b4]">lv_style_set_radius</a> from lv_style_gen.o(.text.lv_style_set_radius) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[b6]">lv_style_set_text_color</a> from lv_style_gen.o(.text.lv_style_set_text_color) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[f0]">lv_text_utf8_get_byte_id</a> from lv_text.o(.text.lv_text_utf8_get_byte_id) referenced from lv_text.o(.data._lv_text_encoded_get_byte_id)
 <LI><a href="#[f1]">lv_text_utf8_get_char_id</a> from lv_text.o(.text.lv_text_utf8_get_char_id) referenced from lv_text.o(.data._lv_text_encoded_get_char_id)
 <LI><a href="#[f3]">lv_text_utf8_get_length</a> from lv_text.o(.text.lv_text_utf8_get_length) referenced from lv_text.o(.data._lv_text_get_encoded_length)
 <LI><a href="#[ea]">lv_text_utf8_next</a> from lv_text.o(.text.lv_text_utf8_next) referenced from lv_text.o(.data..L_MergedGlobals)
 <LI><a href="#[f2]">lv_text_utf8_prev</a> from lv_text.o(.text.lv_text_utf8_prev) referenced from lv_text.o(.data._lv_text_encoded_prev)
 <LI><a href="#[e9]">lv_text_utf8_size</a> from lv_text.o(.text.lv_text_utf8_size) referenced from lv_text.o(.data..L_MergedGlobals)
 <LI><a href="#[90]">lv_trigo_sin</a> from lv_math.o(.text.lv_trigo_sin) referenced from lv_draw_arc.o(.text.lv_draw_arc_get_area)
 <LI><a href="#[90]">lv_trigo_sin</a> from lv_math.o(.text.lv_trigo_sin) referenced from lv_draw_sw_transform.o(.text.lv_draw_sw_transform)
 <LI><a href="#[90]">lv_trigo_sin</a> from lv_math.o(.text.lv_trigo_sin) referenced from lv_area.o(.text.lv_point_transform)
 <LI><a href="#[c4]">mem_observer_cb</a> from lv_sysmon.o(.text.mem_observer_cb) referenced from lv_sysmon.o(.text.sysmon_backend_init_async_cb)
 <LI><a href="#[6c]">mem_update_timer_cb</a> from lv_sysmon.o(.text.mem_update_timer_cb) referenced from lv_sysmon.o(.text._lv_sysmon_builtin_init)
 <LI><a href="#[f4]">my_mem_init</a> from malloc.o(.text.my_mem_init) referenced from malloc.o(.data.mallco_dev)
 <LI><a href="#[f5]">my_mem_perused</a> from malloc.o(.text.my_mem_perused) referenced from malloc.o(.data.mallco_dev)
 <LI><a href="#[c2]">perf_monitor_disp_event_cb</a> from lv_sysmon.o(.text.perf_monitor_disp_event_cb) referenced from lv_sysmon.o(.text.sysmon_backend_init_async_cb)
 <LI><a href="#[c3]">perf_observer_cb</a> from lv_sysmon.o(.text.perf_observer_cb) referenced from lv_sysmon.o(.text.sysmon_backend_init_async_cb)
 <LI><a href="#[6b]">perf_update_timer_cb</a> from lv_sysmon.o(.text.perf_update_timer_cb) referenced from lv_sysmon.o(.text._lv_sysmon_builtin_init)
 <LI><a href="#[be]">puts</a> from puts.o(.text) referenced from main.o(.text.main)
 <LI><a href="#[58]">release_cb</a> from lv_cache_builtin.o(.text.release_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[a5]">resolve_point_coord</a> from lv_line.o(.text.resolve_point_coord) referenced from lv_line.o(.text.lv_line_event)
 <LI><a href="#[aa]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(.text.scroll_anim_ready_cb) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[c0]">scroll_anim_ready_cb</a> from lv_roller.o(.text.scroll_anim_ready_cb) referenced from lv_roller.o(.text.refr_position)
 <LI><a href="#[ac]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
 <LI><a href="#[ac]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[ad]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
 <LI><a href="#[ad]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[57]">set_max_size_cb</a> from lv_cache_builtin.o(.text.set_max_size_cb) referenced from lv_cache_builtin.o(.text._lv_cache_builtin_init)
 <LI><a href="#[a1]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[a2]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[af]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced from lv_roller.o(.text.lv_roller_event)
 <LI><a href="#[af]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced from lv_roller.o(.text.refr_position)
 <LI><a href="#[b2]">style_init_reset</a> from lv_theme_default.o(.text.style_init_reset) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[6d]">sysmon_backend_init_async_cb</a> from lv_sysmon.o(.text.sysmon_backend_init_async_cb) referenced from lv_sysmon.o(.text._lv_sysmon_builtin_init)
 <LI><a href="#[b1]">theme_apply</a> from lv_theme_default.o(.text.theme_apply) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[6a]">trans_anim_cb</a> from lv_obj_style.o(.text.trans_anim_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[68]">trans_anim_ready_cb</a> from lv_obj_style.o(.text.trans_anim_ready_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[69]">trans_anim_start_cb</a> from lv_obj_style.o(.text.trans_anim_start_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[7d]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
 <LI><a href="#[b0]">unsubscribe_on_delete_cb</a> from lv_observer.o(.text.unsubscribe_on_delete_cb) referenced from lv_observer.o(.text.lv_subject_add_observer_obj)
 <LI><a href="#[63]">width_to_stride</a> from lv_draw_buf.o(.text.width_to_stride) referenced from lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[58b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[58c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[58d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[fa]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[130]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[fc]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[58e]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))

<P><STRONG><a name="[58f]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))

<P><STRONG><a name="[590]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))

<P><STRONG><a name="[591]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[592]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[fe]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[100]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[101]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[102]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[104]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[106]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[108]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[109]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[10c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[593]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[10e]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[110]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[112]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[114]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[594]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[11c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[595]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[596]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[116]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[597]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[598]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[599]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[59a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[59b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[59c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[59d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[59e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[59f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5a0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[5a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[5a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5a4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[5a5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[5a6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[5a7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[5a8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[5a9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5aa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[5ab]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[5ac]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[5ad]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[5ae]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[5af]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5b0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5b1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[5b2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[119]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[5b3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[11d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; lv_port_disp_init &rArr; LCD_Init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5b4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[14a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[120]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[5b5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[122]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor_core
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[5b6]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cubic_bezier
</UL>

<P><STRONG><a name="[124]"></a>_ll_sdiv</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[126]"></a>_vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, _vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_printf
</UL>

<P><STRONG><a name="[128]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Card_Init
</UL>

<P><STRONG><a name="[13a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[13b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ff]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[12d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[105]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10d]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[fd]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[12e]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[131]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[133]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[be]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Card_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[135]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
</UL>

<P><STRONG><a name="[1a8]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[286]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_LED
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_sdev_print
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkString
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[137]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5b7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[5b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_invalidate_cb
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
</UL>

<P><STRONG><a name="[5bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5bc]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5bd]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5be]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5bf]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5c0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[139]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[12c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[fb]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[127]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[37]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[107]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[140]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[103]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[10b]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[134]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[132]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[117]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[13f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[3d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[111]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[146]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[113]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[115]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[141]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[13c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[147]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[13e]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[143]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[142]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[5c1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5c2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[144]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[11f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[123]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[5c3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5c4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>At_Create</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, at.o(.text.At_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = At_Create &rArr; _At_Create &rArr; at_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_init
</UL>

<P><STRONG><a name="[5c5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>At_Init</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, at.o(.text.At_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = At_Init &rArr; _At_Init &rArr; _At_Config_no_readString
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[14f]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[150]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff_gen_drv.o(.text.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[2e4]"></a>Get_UART1_Rx_Len</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text.Get_UART1_Rx_Len))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_sdev_available
</UL>

<P><STRONG><a name="[192]"></a>HAL_DMA_Abort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Card_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_init.o(.text.LCD_Init)
</UL>
<P><STRONG><a name="[45]"></a>HAL_GPIO_Init</STRONG> (Thumb, 384 bytes, Stack size 44 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[44]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_user_AT_LED_off
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_user_AT_LED_on
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[151]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[27b]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[152]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[155]"></a>HAL_MspInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[158]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[157]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[153]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15a]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_Reboot
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[27f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[280]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[162]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[156]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_58
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_57
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[25c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
</UL>

<P><STRONG><a name="[17e]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; OUTLINED_FUNCTION_32
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[242]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
</UL>

<P><STRONG><a name="[243]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
</UL>

<P><STRONG><a name="[181]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[188]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[186]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; Write_UART1_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>HAL_UART_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_7 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_UART_MspInit</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[199]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; Write_UART1_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_UART1_Rx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[19d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_sdev_print
</UL>

<P><STRONG><a name="[189]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>LCD_Area_Set</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd_init.o(.text.LCD_Area_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Area_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[19f]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(.text.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Area_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Area_Set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[1a1]"></a>LCD_Init</STRONG> (Thumb, 924 bytes, Stack size 1160 bytes, lcd_init.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>LCD_WR_DATA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_init.o(.text.LCD_Area_Set)
</UL>
<P><STRONG><a name="[43]"></a>LCD_WR_DATA8</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_init.o(.text.LCD_Init)
</UL>
<P><STRONG><a name="[42]"></a>LCD_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_init.o(.text.LCD_Init)
</UL>
<P><STRONG><a name="[1aa]"></a>MMC_SD_Card_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mmc_sd.o(.text.MMC_SD_Card_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MMC_SD_Card_Init &rArr; SD_Init &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_initialize
</UL>

<P><STRONG><a name="[1ac]"></a>MX_FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fatfs.o(.text.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[576]"></a>MX_GPIO_Init</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>MX_SPI2_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>MX_TIM4_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_7 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e5]"></a>Read_UART1_Rx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(.text.Read_UART1_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_UART1_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_sdev_read
</UL>

<P><STRONG><a name="[26f]"></a>SD_DisSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mmc_sd.o(.text.SD_DisSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_DisSelect &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[270]"></a>SD_GetResponse</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mmc_sd.o(.text.SD_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_GetResponse &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
</UL>

<P><STRONG><a name="[1ab]"></a>SD_Init</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mmc_sd.o(.text.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_Init &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Card_Init
</UL>

<P><STRONG><a name="[274]"></a>SD_ReadDisk</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mmc_sd.o(.text.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_ReadDisk &rArr; OUTLINED_FUNCTION_5 &rArr; SD_RecvData &rArr; SD_GetResponse &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_read
</UL>

<P><STRONG><a name="[254]"></a>SD_RecvData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mmc_sd.o(.text.SD_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_RecvData &rArr; SD_GetResponse &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[273]"></a>SD_SPI_SpeedHigh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(.text.SD_SPI_SpeedHigh))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[271]"></a>SD_SPI_SpeedLow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(.text.SD_SPI_SpeedLow))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[276]"></a>SD_Select</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmc_sd.o(.text.SD_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[278]"></a>SD_SendBlock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mmc_sd.o(.text.SD_SendBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_SendBlock &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[1b5]"></a>SD_SendCmd</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mmc_sd.o(.text.SD_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[277]"></a>SD_WaitReady</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmc_sd.o(.text.SD_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
</UL>

<P><STRONG><a name="[279]"></a>SD_WriteDisk</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mmc_sd.o(.text.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_WriteDisk &rArr; OUTLINED_FUNCTION_1 &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_write
</UL>

<P><STRONG><a name="[46]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi.o(.text.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmc_sd.o(.text.SD_SendCmd)
</UL>
<P><STRONG><a name="[275]"></a>SPI2_SetSpeed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi.o(.text.SPI2_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e3]"></a>Stream_Init</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, at_stream_device.o(.text.Stream_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stream_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>SystemClock_Config</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; OUTLINED_FUNCTION_32
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[263]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[19a]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; Write_UART1_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>USER_initialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = USER_initialize &rArr; MMC_SD_Card_Init &rArr; SD_Init &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_SD_Card_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[ef]"></a>USER_ioctl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(.text.USER_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[ed]"></a>USER_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USER_read &rArr; SD_ReadDisk &rArr; OUTLINED_FUNCTION_5 &rArr; SD_RecvData &rArr; SD_GetResponse &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[ec]"></a>USER_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_diskio.o(.text.USER_status))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[ee]"></a>USER_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USER_write &rArr; SD_WriteDisk &rArr; OUTLINED_FUNCTION_1 &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>Write_UART1_Rx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart.o(.text.Write_UART1_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_UART1_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[4c]"></a>_handleAuto</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at.o(.text._handleAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _handleAuto &rArr; at_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[289]"></a>_lv_anim_core_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[28d]"></a>_lv_area_diff</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_area_diff &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[207]"></a>_lv_area_intersect</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_decode_and_draw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_circle
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_next_available_task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[23d]"></a>_lv_area_is_in</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[28e]"></a>_lv_area_is_on</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[251]"></a>_lv_area_is_out</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_area.o(.text._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_area_is_out &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[1ce]"></a>_lv_area_is_point_on</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[295]"></a>_lv_area_join</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[290]"></a>_lv_cache_builtin_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_cache_builtin.o(.text._lv_cache_builtin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_cache_builtin_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[292]"></a>_lv_cache_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_cache.o(.text._lv_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_cache_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[8b]"></a>_lv_display_refr_timer</STRONG> (Thumb, 1412 bytes, Stack size 152 bytes, lv_refr.o(.text._lv_display_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = _lv_display_refr_timer &rArr; refr_area_part &rArr; refr_obj_and_children &rArr; refr_obj &rArr; lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear_custom
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_sw_mask_cleanup
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_has_alpha
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_copy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_color_format
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_is_double_buffered
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flushing
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_display.o(.text.lv_display_create)
</UL>
<P><STRONG><a name="[2a7]"></a>_lv_draw_buf_init_handlers</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_draw_buf.o(.text._lv_draw_buf_init_handlers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_draw_buf_init_handlers &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2a6]"></a>_lv_draw_sw_mask_cleanup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_draw_sw_mask.o(.text._lv_draw_sw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_draw_sw_mask_cleanup &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[4c6]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[514]"></a>_lv_event_pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_pop))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>

<P><STRONG><a name="[513]"></a>_lv_event_push</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_push))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>

<P><STRONG><a name="[2aa]"></a>_lv_fs_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_fs.o(.text._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2ab]"></a>_lv_group_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2ac]"></a>_lv_image_buf_get_transformed_area</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, lv_image_buf.o(.text._lv_image_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lv_image_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
</UL>

<P><STRONG><a name="[2ae]"></a>_lv_image_decoder_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_image_decoder.o(.text._lv_image_decoder_init))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2af]"></a>_lv_inv_area</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_is_invalidation_enabled
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[2b1]"></a>_lv_layout_apply</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_layout.o(.text._lv_layout_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_layout_apply &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[2b2]"></a>_lv_layout_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_layout.o(.text._lv_layout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_layout_init &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[29e]"></a>_lv_ll_clear_custom</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_ll.o(.text._lv_ll_clear_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_ll_clear_custom &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[9d]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_next
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_by_data_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_by_src_cb
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_next
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor_core
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[9e]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_next
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drop_youngest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_by_data_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_by_src_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_cb
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_next
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor_core
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[a0]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[9f]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[28a]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_builtin_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_image_decoder_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_init_pointer
</UL>

<P><STRONG><a name="[2b5]"></a>_lv_ll_ins_head</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_cb
</UL>

<P><STRONG><a name="[29a]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[2a4]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_ins_tail &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_add_observer_obj
</UL>

<P><STRONG><a name="[297]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[29b]"></a>_lv_ll_remove</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear_custom
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_delete
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_cb
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_observer_remove
</UL>

<P><STRONG><a name="[57b]"></a>_lv_obj_destruct</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj_class.o(.text._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[4b4]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[522]"></a>_lv_obj_get_layer_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_layer_type))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[2b6]"></a>_lv_obj_scroll_by_raw</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text._lv_obj_scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
</UL>

<P><STRONG><a name="[1b9]"></a>_lv_obj_style_apply_color_filter</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_style.o(.text._lv_obj_style_apply_color_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[2b9]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 260 bytes, Stack size 128 bytes, lv_obj_style.o(.text._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
</UL>

<P><STRONG><a name="[2c0]"></a>_lv_obj_style_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c1]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, lv_obj_style.o(.text._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
</UL>

<P><STRONG><a name="[39d]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[472]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[53b]"></a>_lv_style_prop_lookup_flags</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_prop_lookup_flags))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
</UL>

<P><STRONG><a name="[2c2]"></a>_lv_sysmon_builtin_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_sysmon.o(.text._lv_sysmon_builtin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_sysmon_builtin_init &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_init_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[408]"></a>_lv_text_encoded_letter_next_2</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_text.o(.text._lv_text_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_text_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[21c]"></a>_lv_text_get_next_line</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, lv_text.o(.text._lv_text_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_is_a_word
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2c7]"></a>_lv_text_set_text_vfmt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_text.o(.text._lv_text_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _lv_text_set_text_vfmt &rArr; lv_vsnprintf &rArr; _lv_vsnprintf &rArr;  _lv_vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[2c9]"></a>_lv_timer_core_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_timer.o(.text._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[370]"></a>_lv_utils_bsearch</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[47]"></a>_sendInfor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at.o(.text._sendInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sendInfor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[284]"></a>at_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_mem.o(.text.at_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_LED
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_paramClear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_printf
</UL>

<P><STRONG><a name="[282]"></a>at_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_mem.o(.text.at_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_LED
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Create
</UL>

<P><STRONG><a name="[285]"></a>at_memcmp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_mem.o(.text.at_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_memcmp &rArr; mymemcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_checkString
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printSet
</UL>

<P><STRONG><a name="[288]"></a>at_memcpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at_mem.o(.text.at_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_LED
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_errorToString
</UL>

<P><STRONG><a name="[283]"></a>at_memset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at_mem.o(.text.at_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_AT_LED
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handleAuto
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_errorToString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_at_printf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Create
</UL>

<P><STRONG><a name="[2e2]"></a>at_user_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_user.o(.text.at_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = at_user_init &rArr; At_Init &rArr; _At_Init &rArr; _At_Config_no_readString
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_Create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[320]"></a>clust2sect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(.text.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[357]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[580]"></a>disk_ioctl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[34d]"></a>disk_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[356]"></a>disk_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[22e]"></a>disk_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[1a4]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a2]"></a>f_mount</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a3]"></a>f_open</STRONG> (Thumb, 448 bytes, Stack size 608 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a6]"></a>f_read</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = f_read &rArr; get_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[33f]"></a>f_sync</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[362]"></a>ff_convert</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ccsbcs.o(.text.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[216]"></a>ff_memalloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fatfs.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[349]"></a>ff_memfree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fatfs.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[31f]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ccsbcs.o(.text.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3b]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[30c]"></a>get_fat</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[345]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(.text.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[205]"></a>lv_anim_delete</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lv_anim.o(.text.lv_anim_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_anim_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
</UL>

<P><STRONG><a name="[1d9]"></a>lv_anim_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2bd]"></a>lv_anim_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_anim_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[ab]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_anim_path_cubic_bezier &rArr; lv_cubic_bezier &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_cubic_bezier
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[7f]"></a>lv_anim_path_linear</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_anim_path_linear &rArr; OUTLINED_FUNCTION_0 &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_anim.o(.text.lv_anim_init)
<LI> lv_style.o(.text.lv_style_transition_dsc_init)
<LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[26b]"></a>lv_anim_speed_clamped</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_speed_clamped))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_speed_clamped
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[2bf]"></a>lv_anim_start</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_anim_start &rArr; remove_concurrent_anims &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_time
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[3c0]"></a>lv_arc_set_angles</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_arc_set_angles &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[3c1]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[3c2]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[3b6]"></a>lv_arc_set_value</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_arc_set_value &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[5f]"></a>lv_area_get_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_refr.o(.text._lv_display_refr_timer)
</UL>
<P><STRONG><a name="[3aa]"></a>lv_area_increase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_area.o(.text.lv_area_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_area_increase
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[220]"></a>lv_area_move</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_area.o(.text.lv_area_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_area_move
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_decode_and_draw
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[25f]"></a>lv_area_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[78]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[79]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[2c4]"></a>lv_async_call</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_async.o(.text.lv_async_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_set_repeat_count
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sysmon_builtin_init
</UL>

<P><STRONG><a name="[3c6]"></a>lv_async_call_cancel</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lv_async.o(.text.lv_async_call_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_async_call_cancel &rArr; lv_timer_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_delete
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[3b9]"></a>lv_atan2</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lv_math.o(.text.lv_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[53a]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
</UL>

<P><STRONG><a name="[538]"></a>lv_bar_get_start_value</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[535]"></a>lv_bar_get_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3cf]"></a>lv_bar_is_symmetrical</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_is_symmetrical))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3d5]"></a>lv_bar_set_start_value</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
</UL>

<P><STRONG><a name="[3c9]"></a>lv_bar_set_value</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
</UL>

<P><STRONG><a name="[88]"></a>lv_bin_decoder_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_bin_decoder.o(.text.lv_bin_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bin_decoder_close &rArr; lv_cache_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_unlock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_lock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bin_decoder.o(.text.lv_bin_decoder_init)
</UL>
<P><STRONG><a name="[87]"></a>lv_bin_decoder_get_area</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, lv_bin_decoder.o(.text.lv_bin_decoder_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_bin_decoder_get_area &rArr; fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_malloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bin_decoder.o(.text.lv_bin_decoder_init)
</UL>
<P><STRONG><a name="[85]"></a>lv_bin_decoder_info</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_bin_decoder.o(.text.lv_bin_decoder_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_bin_decoder_info &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcmp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bin_decoder.o(.text.lv_bin_decoder_init)
</UL>
<P><STRONG><a name="[3dd]"></a>lv_bin_decoder_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_bin_decoder.o(.text.lv_bin_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_bin_decoder_init &rArr; lv_image_decoder_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_set_close_cb
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_set_get_area_cb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_set_open_cb
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_set_info_cb
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[86]"></a>lv_bin_decoder_open</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, lv_bin_decoder.o(.text.lv_bin_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_bin_decoder_open &rArr; decode_compressed &rArr; decode_alpha_only &rArr; fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_unlock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strdup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_add
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_get_data
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_find_by_src
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcmp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_decoder_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_indexed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bin_decoder.o(.text.lv_bin_decoder_init)
</UL>
<P><STRONG><a name="[3e6]"></a>lv_cache_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_cache.o(.text.lv_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[3e3]"></a>lv_cache_find_by_src</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_cache.o(.text.lv_cache_find_by_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cache_find_by_src
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[3e4]"></a>lv_cache_get_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_cache.o(.text.lv_cache_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[2d2]"></a>lv_cache_get_max_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_cache.o(.text.lv_cache_get_max_size))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_cb
</UL>

<P><STRONG><a name="[3d7]"></a>lv_cache_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_cache.o(.text.lv_cache_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cache_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_close
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[3d8]"></a>lv_cache_release</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_cache.o(.text.lv_cache_release))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_close
</UL>

<P><STRONG><a name="[473]"></a>lv_cache_set_max_size</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_cache.o(.text.lv_cache_set_max_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_cache_set_max_size
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[3d9]"></a>lv_cache_unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_cache.o(.text.lv_cache_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_close
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[50a]"></a>lv_clamp_height</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_height
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[509]"></a>lv_clamp_width</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_width
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[30f]"></a>lv_color_darken</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[311]"></a>lv_color_format_get_bpp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_format_get_bpp))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_width_to_stride
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width_to_stride
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_get_area
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
</UL>

<P><STRONG><a name="[2a0]"></a>lv_color_format_has_alpha</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_format_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
</UL>

<P><STRONG><a name="[41d]"></a>lv_color_to_32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_to_32))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
</UL>

<P><STRONG><a name="[41e]"></a>lv_color_to_u16</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_to_u16))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb565
</UL>

<P><STRONG><a name="[1f3]"></a>lv_color_to_u32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_to_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
</UL>

<P><STRONG><a name="[3b1]"></a>lv_cubic_bezier</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, lv_math.o(.text.lv_cubic_bezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_cubic_bezier &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_cubic_bezier
</UL>

<P><STRONG><a name="[3ee]"></a>lv_display_add_event_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_display_add_event_cb &rArr; lv_event_add &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
</UL>

<P><STRONG><a name="[3f0]"></a>lv_display_create</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, lv_display.o(.text.lv_display_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_display_create &rArr; lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_add_event_cb
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[325]"></a>lv_display_flush_ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[29c]"></a>lv_display_get_color_format</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_color_format))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
</UL>

<P><STRONG><a name="[294]"></a>lv_display_get_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[1e4]"></a>lv_display_get_dpi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[299]"></a>lv_display_get_horizontal_resolution</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_horizontal_resolution))
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[4b2]"></a>lv_display_get_layer_bottom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_layer_bottom))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[48e]"></a>lv_display_get_layer_sys</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_layer_sys))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
</UL>

<P><STRONG><a name="[4b3]"></a>lv_display_get_layer_top</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_layer_top))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3f7]"></a>lv_display_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[4b0]"></a>lv_display_get_screen_active</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_screen_active))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[4b1]"></a>lv_display_get_screen_prev</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_screen_prev))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[572]"></a>lv_display_get_theme</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_theme))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>

<P><STRONG><a name="[1c0]"></a>lv_display_get_vertical_resolution</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_get_vertical_resolution))
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[296]"></a>lv_display_is_double_buffered</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_is_double_buffered))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[2b0]"></a>lv_display_is_invalidation_enabled</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_is_invalidation_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[24e]"></a>lv_display_send_event</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, lv_display.o(.text.lv_display_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_display_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[529]"></a>lv_display_set_draw_buffers</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_display.o(.text.lv_display_set_draw_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_display_set_draw_buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[528]"></a>lv_display_set_flush_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_display.o(.text.lv_display_set_flush_cb))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[21e]"></a>lv_draw_add_task</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_draw.o(.text.lv_draw_add_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_draw_add_task &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
</UL>

<P><STRONG><a name="[3bd]"></a>lv_draw_arc</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_draw_arc.o(.text.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_draw_arc &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3bb]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_draw_arc.o(.text.lv_draw_arc_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_arc_dsc_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3a6]"></a>lv_draw_arc_get_area</STRONG> (Thumb, 804 bytes, Stack size 48 bytes, lv_draw_arc.o(.text.lv_draw_arc_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_arc_get_area
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[33e]"></a>lv_draw_border_dsc_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_draw_rect.o(.text.lv_draw_border_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_border_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[40b]"></a>lv_draw_buf_align</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.lv_draw_buf_align))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
</UL>

<P><STRONG><a name="[40d]"></a>lv_draw_buf_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_draw_buf.o(.text.lv_draw_buf_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_buf_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
</UL>

<P><STRONG><a name="[29d]"></a>lv_draw_buf_copy</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, lv_draw_buf.o(.text.lv_draw_buf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_buf_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[314]"></a>lv_draw_buf_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.lv_draw_buf_free))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_layer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_decoder_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
</UL>

<P><STRONG><a name="[40f]"></a>lv_draw_buf_go_to_xy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_draw_buf.o(.text.lv_draw_buf_go_to_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_buf_go_to_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_go_to_xy
</UL>

<P><STRONG><a name="[312]"></a>lv_draw_buf_malloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.lv_draw_buf_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_get_area
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
</UL>

<P><STRONG><a name="[29f]"></a>lv_draw_buf_width_to_stride</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.lv_draw_buf_width_to_stride))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_layer
</UL>

<P><STRONG><a name="[3fe]"></a>lv_draw_create_unit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_draw.o(.text.lv_draw_create_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_draw_create_unit &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init
</UL>

<P><STRONG><a name="[3ff]"></a>lv_draw_dispatch</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_draw.o(.text.lv_draw_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_next
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
</UL>

<P><STRONG><a name="[400]"></a>lv_draw_dispatch_layer</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lv_draw.o(.text.lv_draw_dispatch_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch
</UL>

<P><STRONG><a name="[334]"></a>lv_draw_dispatch_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_dispatch_request))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[57d]"></a>lv_draw_dispatch_wait_for_request</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_dispatch_wait_for_request))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[401]"></a>lv_draw_fill_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_draw_rect.o(.text.lv_draw_fill_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_fill_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[1eb]"></a>lv_draw_finalize_task_creation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_draw.o(.text.lv_draw_finalize_task_creation))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
</UL>

<P><STRONG><a name="[326]"></a>lv_draw_get_next_available_task</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lv_draw.o(.text.lv_draw_get_next_available_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_draw_get_next_available_task &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[403]"></a>lv_draw_image</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_draw_image.o(.text.lv_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_draw_image &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[3d3]"></a>lv_draw_image_dsc_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_draw_image.o(.text.lv_draw_image_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_image_dsc_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[471]"></a>lv_draw_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1fd]"></a>lv_draw_label</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_draw_label &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strdup
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[33c]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[405]"></a>lv_draw_label_iterate_letters</STRONG> (Thumb, 1216 bytes, Stack size 312 bytes, lv_draw_label.o(.text.lv_draw_label_iterate_letters))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_draw_label_iterate_letters &rArr; lv_text_get_size &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_encoded_letter_next_2
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill_dsc_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter_dsc_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_is_marker
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_malloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_align
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_label
</UL>

<P><STRONG><a name="[3d4]"></a>lv_draw_layer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_draw_image.o(.text.lv_draw_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_draw_layer &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[327]"></a>lv_draw_layer_alloc_buf</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_draw.o(.text.lv_draw_layer_alloc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_draw_layer_alloc_buf &rArr; lv_draw_buf_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_clear
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_has_alpha
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_malloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_align
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[3d0]"></a>lv_draw_layer_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_draw.o(.text.lv_draw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_draw_layer_create &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[40e]"></a>lv_draw_layer_go_to_xy</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_draw.o(.text.lv_draw_layer_go_to_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_layer_go_to_xy &rArr; lv_draw_buf_go_to_xy
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_go_to_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
</UL>

<P><STRONG><a name="[407]"></a>lv_draw_letter_dsc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_draw_letter_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_letter_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[410]"></a>lv_draw_line</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_draw_line &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[411]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_line_dsc_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[3d2]"></a>lv_draw_mask_rect</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_draw_mask_rect &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_has_alpha
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3d1]"></a>lv_draw_mask_rect_dsc_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_mask_rect_dsc_init &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[33a]"></a>lv_draw_rect</STRONG> (Thumb, 808 bytes, Stack size 64 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_draw_rect &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill_dsc_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[338]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[331]"></a>lv_draw_sw_arc</STRONG> (Thumb, 866 bytes, Stack size 528 bytes, lv_draw_sw_arc.o(.text.lv_draw_sw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_arc &rArr; lv_draw_sw_border &rArr; OUTLINED_FUNCTION_3 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_angle_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_circle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_border_dsc_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[32c]"></a>lv_draw_sw_bg_image</STRONG> (Thumb, 408 bytes, Stack size 168 bytes, lv_draw_sw_bg_img.o(.text.lv_draw_sw_bg_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = lv_draw_sw_bg_image &rArr; lv_draw_sw_image &rArr; img_decode_and_draw &rArr; img_draw_core &rArr; lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_label
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[1c8]"></a>lv_draw_sw_blend</STRONG> (Thumb, 440 bytes, Stack size 80 bytes, lv_draw_sw_blend.o(.text.lv_draw_sw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb565
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_go_to_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[416]"></a>lv_draw_sw_blend_color_to_argb8888</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_draw_sw_blend_color_to_argb8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_draw_sw_blend_color_to_argb8888 &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to_32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to_u32
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_32_32_mix
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_with_alpha_cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[418]"></a>lv_draw_sw_blend_color_to_rgb565</STRONG> (Thumb, 764 bytes, Stack size 88 bytes, lv_draw_sw_blend_to_rgb565.o(.text.lv_draw_sw_blend_color_to_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_draw_sw_blend_color_to_rgb565
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to_u16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_16_16_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[417]"></a>lv_draw_sw_blend_color_to_rgb888</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, lv_draw_sw_blend_to_rgb888.o(.text.lv_draw_sw_blend_color_to_rgb888))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_draw_sw_blend_color_to_rgb888 &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_24_mix
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[419]"></a>lv_draw_sw_blend_image_to_argb8888</STRONG> (Thumb, 1110 bytes, Stack size 80 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_draw_sw_blend_image_to_argb8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_32_32_mix
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_with_alpha_cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[415]"></a>lv_draw_sw_blend_image_to_rgb565</STRONG> (Thumb, 1222 bytes, Stack size 72 bytes, lv_draw_sw_blend_to_rgb565.o(.text.lv_draw_sw_blend_image_to_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_draw_sw_blend_image_to_rgb565 &rArr; rgb888_image_blend &rArr; lv_color_24_16_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_16_mix
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_16_16_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[41a]"></a>lv_draw_sw_blend_image_to_rgb888</STRONG> (Thumb, 1176 bytes, Stack size 80 bytes, lv_draw_sw_blend_to_rgb888.o(.text.lv_draw_sw_blend_image_to_rgb888))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = lv_draw_sw_blend_image_to_rgb888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_24_24_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_24_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>

<P><STRONG><a name="[32a]"></a>lv_draw_sw_border</STRONG> (Thumb, 1202 bytes, Stack size 264 bytes, lv_draw_sw_border.o(.text.lv_draw_sw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lv_draw_sw_border &rArr; OUTLINED_FUNCTION_3 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[32b]"></a>lv_draw_sw_box_shadow</STRONG> (Thumb, 2554 bytes, Stack size 256 bytes, lv_draw_sw_box_shadow.o(.text.lv_draw_sw_box_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = lv_draw_sw_box_shadow &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[329]"></a>lv_draw_sw_fill</STRONG> (Thumb, 922 bytes, Stack size 216 bytes, lv_draw_sw_fill.o(.text.lv_draw_sw_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_fill &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[32e]"></a>lv_draw_sw_image</STRONG> (Thumb, 326 bytes, Stack size 144 bytes, lv_draw_sw_img.o(.text.lv_draw_sw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = lv_draw_sw_image &rArr; img_decode_and_draw &rArr; img_draw_core &rArr; lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_decode_and_draw
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_close
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_image_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[43a]"></a>lv_draw_sw_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_draw_sw.o(.text.lv_draw_sw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_draw_sw_init &rArr; lv_draw_create_unit &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_create_unit
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[32d]"></a>lv_draw_sw_label</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_letter.o(.text.lv_draw_sw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_draw_sw_label &rArr; lv_draw_label_iterate_letters &rArr; lv_text_get_size &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[32f]"></a>lv_draw_sw_layer</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, lv_draw_sw_img.o(.text.lv_draw_sw_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = lv_draw_sw_layer &rArr; lv_draw_sw_image &rArr; img_decode_and_draw &rArr; img_draw_core &rArr; lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[330]"></a>lv_draw_sw_line</STRONG> (Thumb, 1428 bytes, Stack size 376 bytes, lv_draw_sw_line.o(.text.lv_draw_sw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_line &rArr; lv_draw_sw_fill &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_points_init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[412]"></a>lv_draw_sw_mask_angle_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_draw_sw_mask_angle_init &rArr; lv_draw_sw_mask_line_angle_init &rArr; lv_draw_sw_mask_line_points_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_angle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[1ef]"></a>lv_draw_sw_mask_apply</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_sw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[98]"></a>lv_draw_sw_mask_free_param</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_draw_sw_mask_free_param &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_triangle.o(.text.lv_draw_sw_triangle)
</UL>
<P><STRONG><a name="[43b]"></a>lv_draw_sw_mask_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_init))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init
</UL>

<P><STRONG><a name="[440]"></a>lv_draw_sw_mask_line_angle_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_line_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_draw_sw_mask_line_angle_init &rArr; lv_draw_sw_mask_line_points_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_points_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_angle_init
</UL>

<P><STRONG><a name="[43e]"></a>lv_draw_sw_mask_line_points_init</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_draw_sw_mask_line_points_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_angle_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[413]"></a>lv_draw_sw_mask_radius_init</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, lv_draw_sw_mask.o(.text.lv_draw_sw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_draw_sw_mask_radius_init &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mutex_lock
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[333]"></a>lv_draw_sw_mask_rect</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, lv_draw_sw_mask_rect.o(.text.lv_draw_sw_mask_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_draw_sw_mask_rect &rArr; lv_draw_sw_mask_radius_init &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_go_to_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[39e]"></a>lv_draw_sw_transform</STRONG> (Thumb, 1576 bytes, Stack size 232 bytes, lv_draw_sw_transform.o(.text.lv_draw_sw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rgb565a8
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rgb888
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix32
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point_upscaled
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
</UL>

<P><STRONG><a name="[332]"></a>lv_draw_sw_triangle</STRONG> (Thumb, 764 bytes, Stack size 336 bytes, lv_draw_sw_triangle.o(.text.lv_draw_sw_triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = lv_draw_sw_triangle &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_points_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[2fa]"></a>lv_dropdown_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_dropdown_close &rArr; lv_obj_remove_state &rArr; update_obj_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_state
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[44f]"></a>lv_dropdown_get_selected_str</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_dropdown.o(.text.lv_dropdown_get_selected_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_dropdown_get_selected_str
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2f9]"></a>lv_dropdown_is_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_dropdown_is_open
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2fe]"></a>lv_dropdown_open</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, lv_dropdown.o(.text.lv_dropdown_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[447]"></a>lv_dropdown_set_options_static</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_set_options_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_dropdown_set_options_static &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[3ef]"></a>lv_event_add</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_event.o(.text.lv_event_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_event_add &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_add_event_cb
</UL>

<P><STRONG><a name="[324]"></a>lv_event_get_code</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_event_cb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_monitor_disp_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[4c7]"></a>lv_event_get_current_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_current_target))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[45f]"></a>lv_event_get_indev</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_obj_event.o(.text.lv_event_get_indev))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[3ba]"></a>lv_event_get_layer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_event.o(.text.lv_event_get_layer))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[231]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[1db]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[589]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_on_delete_cb
</UL>

<P><STRONG><a name="[460]"></a>lv_event_remove_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_event.o(.text.lv_event_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_event_remove_all &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[3f8]"></a>lv_event_send</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lv_event.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_send_event
</UL>

<P><STRONG><a name="[461]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj_event.o(.text.lv_event_set_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_event_set_ext_draw_size
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[2b3]"></a>lv_flex_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_flex_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_init
</UL>

<P><STRONG><a name="[d3]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[40c]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[40a]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[d2]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[2c5]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[7e]"></a>lv_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free_core
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear_custom
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_sw_mask_cleanup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call_cancel
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_remove_all
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_close
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_layer
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_delete
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_timer_cb
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_get_area
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_invalidate_cb
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_decoder_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_indexed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_observer_remove
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.grid_update)
</UL>
<P><STRONG><a name="[462]"></a>lv_free_core</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_mem_core_builtin.o(.text.lv_free_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>

<P><STRONG><a name="[364]"></a>lv_fs_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_fs_close &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_decoder_data
</UL>

<P><STRONG><a name="[464]"></a>lv_fs_get_drv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[3db]"></a>lv_fs_get_ext</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
</UL>

<P><STRONG><a name="[3dc]"></a>lv_fs_open</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_fs.o(.text.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_fs_open &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
</UL>

<P><STRONG><a name="[318]"></a>lv_fs_read</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, lv_fs.o(.text.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[316]"></a>lv_fs_seek</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_fs.o(.text.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[317]"></a>lv_fs_tell</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_fs.o(.text.lv_fs_tell))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[438]"></a>lv_gradient_cleanup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_gradient_cleanup &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[465]"></a>lv_gradient_color_calculate</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_color_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_gradient_color_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[436]"></a>lv_gradient_get</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_gradient_get &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_color_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[2b4]"></a>lv_grid_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_grid_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_init
</UL>

<P><STRONG><a name="[466]"></a>lv_group_add_obj</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_group_add_obj &rArr; lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[469]"></a>lv_group_focus_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[46a]"></a>lv_group_focus_prev</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[4c2]"></a>lv_group_get_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[3b7]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[4a0]"></a>lv_group_get_focused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>

<P><STRONG><a name="[467]"></a>lv_group_remove_obj</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[2fd]"></a>lv_group_set_editing</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[439]"></a>lv_image_decoder_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_image_decoder.o(.text.lv_image_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_image_decoder_close &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
</UL>

<P><STRONG><a name="[3de]"></a>lv_image_decoder_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_image_decoder.o(.text.lv_image_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_image_decoder_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
</UL>

<P><STRONG><a name="[39b]"></a>lv_image_decoder_get_area</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_image_decoder_get_area))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_decode_and_draw
</UL>

<P><STRONG><a name="[3e5]"></a>lv_image_decoder_get_info</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_image_decoder.o(.text.lv_image_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_image_decoder_get_info &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_width_to_stride
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[414]"></a>lv_image_decoder_open</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, lv_image_decoder.o(.text.lv_image_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_image_decoder_open &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_width_to_stride
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
</UL>

<P><STRONG><a name="[3e2]"></a>lv_image_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_image_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
</UL>

<P><STRONG><a name="[3e1]"></a>lv_image_decoder_set_get_area_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_image_decoder_set_get_area_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
</UL>

<P><STRONG><a name="[3df]"></a>lv_image_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_image_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
</UL>

<P><STRONG><a name="[3e0]"></a>lv_image_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_image_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
</UL>

<P><STRONG><a name="[3da]"></a>lv_image_src_get_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_image.o(.text.lv_image_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2f7]"></a>lv_indev_active</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_active))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[452]"></a>lv_indev_get_active_obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_active_obj))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[373]"></a>lv_indev_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>

<P><STRONG><a name="[372]"></a>lv_indev_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[3b8]"></a>lv_indev_get_point</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[4df]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[2f8]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[2fb]"></a>lv_indev_get_type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[52f]"></a>lv_indev_get_vect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[46d]"></a>lv_indev_reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_indev.o(.text.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_indev_reset &rArr; indev_reset_core &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_core
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[3a1]"></a>lv_indev_send_event</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, lv_indev.o(.text.lv_indev_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_indev_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_core
</UL>

<P><STRONG><a name="[46f]"></a>lv_init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lv_init.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_init &rArr; _lv_sysmon_builtin_init &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_unlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_set_max_size
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_lock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_builtin_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_image_decoder_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sysmon_builtin_init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_buf_init_handlers
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45e]"></a>lv_label_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
</UL>

<P><STRONG><a name="[47f]"></a>lv_label_get_letter_on</STRONG> (Thumb, 388 bytes, Stack size 104 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_encoded_letter_next_2
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_x_coordinate
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[22a]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
</UL>

<P><STRONG><a name="[474]"></a>lv_label_set_long_mode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[475]"></a>lv_label_set_text</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[48c]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_set_text_vfmt
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_observer_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_observer_cb
</UL>

<P><STRONG><a name="[457]"></a>lv_label_set_text_static</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[1d2]"></a>lv_malloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_core
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strdup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_malloc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_get_area
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_indexed
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_set_text_vfmt
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[494]"></a>lv_malloc_core</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_mem_core_builtin.o(.text.lv_malloc_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>

<P><STRONG><a name="[36d]"></a>lv_malloc_zeroed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_malloc_zeroed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_core
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_create_unit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decoder_data
</UL>

<P><STRONG><a name="[1cc]"></a>lv_map</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_math.o(.text.lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_cubic_bezier
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[470]"></a>lv_mem_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_mem_core_builtin.o(.text.lv_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_mem_init &rArr; _lv_ll_ins_tail &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_get_pool
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[499]"></a>lv_mem_monitor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_monitor &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_update_timer_cb
</UL>

<P><STRONG><a name="[49a]"></a>lv_mem_monitor_core</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_mem_core_builtin.o(.text.lv_mem_monitor_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[261]"></a>lv_memcpy</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, lv_string_builtin.o(.text.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strdup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_copy
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[1ed]"></a>lv_memset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_string_builtin.o(.text.lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect_dsc_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_cb
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor_core
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_update_timer_cb
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>

<P><STRONG><a name="[293]"></a>lv_mutex_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_os_none.o(.text.lv_mutex_init))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_init
</UL>

<P><STRONG><a name="[3e8]"></a>lv_mutex_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_os_none.o(.text.lv_mutex_lock))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_lock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
</UL>

<P><STRONG><a name="[3e9]"></a>lv_mutex_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_os_none.o(.text.lv_mutex_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_unlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_free_param
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
</UL>

<P><STRONG><a name="[49e]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_obj_event.o(.text.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_event_add &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_add_observer_obj
</UL>

<P><STRONG><a name="[3b2]"></a>lv_obj_add_flag</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, lv_obj.o(.text.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_add_flag &rArr; OUTLINED_FUNCTION_4 &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[454]"></a>lv_obj_add_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_add_state &rArr; update_obj_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[c5]"></a>lv_obj_add_style</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_has_flag
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.theme_apply)
</UL>
<P><STRONG><a name="[1d4]"></a>lv_obj_align</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[45a]"></a>lv_obj_align_to</STRONG> (Thumb, 850 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[2b7]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>

<P><STRONG><a name="[4af]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, lv_obj_pos.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_sys
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_top
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_bottom
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_screen_prev
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_screen_active
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
</UL>

<P><STRONG><a name="[3ca]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_y
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_x
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[45d]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[25b]"></a>lv_obj_check_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_check_type))
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[449]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[44a]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[8c]"></a>lv_obj_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_display.o(.text.lv_display_create)
</UL>
<P><STRONG><a name="[44b]"></a>lv_obj_delete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_delete &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete_async_cb
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
</UL>

<P><STRONG><a name="[4bf]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[3b5]"></a>lv_obj_event_base</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_event.o(.text.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[307]"></a>lv_obj_get_child</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>

<P><STRONG><a name="[38b]"></a>lv_obj_get_child_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child_count))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[47c]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[35a]"></a>lv_obj_get_content_height</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_content_height &rArr; OUTLINED_FUNCTION_11 &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[306]"></a>lv_obj_get_content_width</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[380]"></a>lv_obj_get_coords</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[482]"></a>lv_obj_get_disp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2fc]"></a>lv_obj_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2bc]"></a>lv_obj_get_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_with_margin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[502]"></a>lv_obj_get_index</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_tree.o(.text.lv_obj_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[258]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lv_obj_style.o(.text.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[20d]"></a>lv_obj_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_vect_recursive
</UL>

<P><STRONG><a name="[448]"></a>lv_obj_get_screen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_screen))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[4d7]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[4cc]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[209]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[203]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[47e]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[35e]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[35d]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[249]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1238 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>

<P><STRONG><a name="[4ca]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4da]"></a>lv_obj_get_self_height</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_self_height &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4de]"></a>lv_obj_get_self_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_self_width &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[361]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[233]"></a>lv_obj_get_style_opa_recursive</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_get_style_opa_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_get_style_opa_recursive &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[7c]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lv_obj_style.o(.text.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_y
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_x
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_apply
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_y
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_x
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
</UL>
<BR>[Address Reference Count : 7]<UL><LI> lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc)
<LI> lv_refr.o(.text.refr_obj)
<LI> lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc)
<LI> lv_obj_pos.o(.text.transform_point)
<LI> lv_arc.o(.text.knob_get_extra_size)
<LI> lv_flex.o(.text.flex_update)
<LI> lv_roller.o(.text.transform_vect_recursive)
</UL>
<P><STRONG><a name="[4b5]"></a>lv_obj_get_transformed_area</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_obj_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[2bb]"></a>lv_obj_get_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_with_margin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[45b]"></a>lv_obj_get_y</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_space_top &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[45c]"></a>lv_obj_get_y2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_y2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_y2 &rArr; lv_obj_get_y &rArr; lv_obj_get_style_space_top &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[355]"></a>lv_obj_has_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag))
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[24b]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[3bc]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; OUTLINED_FUNCTION_2 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[450]"></a>lv_obj_init_draw_image_dsc</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_image_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_init_draw_image_dsc &rArr; OUTLINED_FUNCTION_2 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[33d]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; OUTLINED_FUNCTION_7 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[493]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; OUTLINED_FUNCTION_2 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[339]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; OUTLINED_FUNCTION_7 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_y
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_x
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[1b7]"></a>lv_obj_invalidate</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[3a7]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_is_invalidation_enabled
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[4cb]"></a>lv_obj_is_editable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_editable))
<BR><BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4c3]"></a>lv_obj_is_group_def</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_group_def))
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[49f]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[3a5]"></a>lv_obj_is_visible</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[1e1]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_display_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>

<P><STRONG><a name="[2b8]"></a>lv_obj_move_children_by</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[501]"></a>lv_obj_move_to</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[456]"></a>lv_obj_move_to_index</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_move_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[3af]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[505]"></a>lv_obj_redraw</STRONG> (Thumb, 592 bytes, Stack size 280 bytes, lv_refr.o(.text.lv_obj_redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + In Cycle
<LI>Call Chain = lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect_dsc_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[3ae]"></a>lv_obj_refr_pos</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[35f]"></a>lv_obj_refr_size</STRONG> (Thumb, 1180 bytes, Stack size 96 bytes, lv_obj_pos.o(.text.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_height
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_width
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[50b]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[44c]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_mark_layout_as_dirty &rArr; lv_display_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[4a5]"></a>lv_obj_refresh_style</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[3b3]"></a>lv_obj_remove_flag</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, lv_obj.o(.text.lv_obj_remove_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[446]"></a>lv_obj_remove_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_remove_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_remove_state &rArr; update_obj_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_obj_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
</UL>

<P><STRONG><a name="[4a4]"></a>lv_obj_remove_style</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, lv_obj_style.o(.text.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_has_flag
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[8d]"></a>lv_obj_remove_style_all</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_remove_style_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_display.o(.text.lv_display_create)
</UL>
<P><STRONG><a name="[50f]"></a>lv_obj_report_style_change</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_next
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[504]"></a>lv_obj_scroll_by</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[511]"></a>lv_obj_scroll_by_bounded</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by_bounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_scroll_by_bounded &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>

<P><STRONG><a name="[4cd]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; OUTLINED_FUNCTION_9 &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d4]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d5]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[4c5]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, lv_obj_scroll.o(.text.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[a8]"></a>lv_obj_send_event</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, lv_obj_event.o(.text.lv_obj_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_pop
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_core
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_obj_tree.o(.text.lv_obj_set_parent)
<LI> lv_refr.o(.text.lv_obj_redraw)
<LI> lv_refr.o(.text.refr_obj_and_children)
</UL>
<P><STRONG><a name="[3b4]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[459]"></a>lv_obj_set_height</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[516]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
</UL>

<P><STRONG><a name="[455]"></a>lv_obj_set_parent</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[4a7]"></a>lv_obj_set_pos</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[8e]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_display.o(.text.lv_display_create)
</UL>
<P><STRONG><a name="[4a6]"></a>lv_obj_set_style_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[518]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[519]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[515]"></a>lv_obj_set_style_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[51a]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[51b]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[51c]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[51d]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[51e]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
</UL>

<P><STRONG><a name="[51f]"></a>lv_obj_set_style_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
</UL>

<P><STRONG><a name="[520]"></a>lv_obj_set_style_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[521]"></a>lv_obj_set_style_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>

<P><STRONG><a name="[458]"></a>lv_obj_set_width</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[517]"></a>lv_obj_set_x</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[3a3]"></a>lv_obj_set_y</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[a7]"></a>lv_obj_transform_point</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_pos.o(.text.lv_obj_get_transformed_area)
</UL>
<P><STRONG><a name="[5e]"></a>lv_obj_update_layout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_refr.o(.text._lv_display_refr_timer)
</UL>
<P><STRONG><a name="[577]"></a>lv_observer_get_target</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_observer.o(.text.lv_observer_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_observer_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_observer_cb
</UL>

<P><STRONG><a name="[524]"></a>lv_observer_remove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_observer.o(.text.lv_observer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_observer_remove &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_on_delete_cb
</UL>

<P><STRONG><a name="[388]"></a>lv_palette_darken</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_palette.o(.text.lv_palette_darken))
<BR><BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[387]"></a>lv_palette_lighten</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_palette.o(.text.lv_palette_lighten))
<BR><BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[22c]"></a>lv_palette_main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_palette.o(.text.lv_palette_main))
<BR><BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>

<P><STRONG><a name="[67]"></a>lv_point_transform</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, lv_area.o(.text.lv_point_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_vect_recursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_image_buf.o(.text._lv_image_buf_get_transformed_area)
</UL>
<P><STRONG><a name="[527]"></a>lv_port_disp_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_port_disp.o(.text.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = lv_port_disp_init &rArr; LCD_Init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_set_draw_buffers
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_set_flush_cb
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>lv_realloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc_core
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_add
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>

<P><STRONG><a name="[52a]"></a>lv_realloc_core</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_mem_core_builtin.o(.text.lv_realloc_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
</UL>

<P><STRONG><a name="[52d]"></a>lv_roller_set_options</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lv_roller.o(.text.lv_roller_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[532]"></a>lv_roller_set_selected</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lv_roller.o(.text.lv_roller_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[351]"></a>lv_strcmp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_string_builtin.o(.text.lv_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_by_src_cb
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcmp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_info
</UL>

<P><STRONG><a name="[46c]"></a>lv_strcpy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_string_builtin.o(.text.lv_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
</UL>

<P><STRONG><a name="[3e7]"></a>lv_strdup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_string_builtin.o(.text.lv_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_strdup &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[453]"></a>lv_strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_string_builtin.o(.text.lv_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strdup
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
</UL>

<P><STRONG><a name="[1be]"></a>lv_style_get_prop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_style.o(.text.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>

<P><STRONG><a name="[386]"></a>lv_style_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_style_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[588]"></a>lv_style_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[53c]"></a>lv_style_remove_prop</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_style_remove_prop &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>

<P><STRONG><a name="[50e]"></a>lv_style_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_style_reset &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[53d]"></a>lv_style_set_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[53e]"></a>lv_style_set_arc_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[53f]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[540]"></a>lv_style_set_arc_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b3]"></a>lv_style_set_bg_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[541]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_bg_grad_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b5]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[542]"></a>lv_style_set_border_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[543]"></a>lv_style_set_border_post</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[544]"></a>lv_style_set_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[545]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[546]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[547]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[548]"></a>lv_style_set_line_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[549]"></a>lv_style_set_line_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[54a]"></a>lv_style_set_max_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_max_height &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[214]"></a>lv_style_set_outline_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>

<P><STRONG><a name="[54b]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[54c]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[54d]"></a>lv_style_set_outline_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[551]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b7]"></a>lv_style_set_pad_column</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[54e]"></a>lv_style_set_pad_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[54f]"></a>lv_style_set_pad_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[b8]"></a>lv_style_set_pad_row</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[550]"></a>lv_style_set_pad_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_top))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[238]"></a>lv_style_set_prop</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_offset_y
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
</UL>

<P><STRONG><a name="[b4]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[552]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[553]"></a>lv_style_set_shadow_offset_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_shadow_offset_y &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[554]"></a>lv_style_set_shadow_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_shadow_opa &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[555]"></a>lv_style_set_shadow_spread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_shadow_spread &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[556]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[557]"></a>lv_style_set_text_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b6]"></a>lv_style_set_text_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[558]"></a>lv_style_set_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[559]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55a]"></a>lv_style_set_transform_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55b]"></a>lv_style_set_transform_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55c]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55d]"></a>lv_style_set_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55e]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_style_transition_dsc_init &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[55f]"></a>lv_subject_add_observer_obj</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_observer.o(.text.lv_subject_add_observer_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_subject_add_observer_obj &rArr; lv_obj_add_event_cb &rArr; lv_event_add &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
</UL>

<P><STRONG><a name="[578]"></a>lv_subject_get_pointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_observer.o(.text.lv_subject_get_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_observer_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_observer_cb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_monitor_disp_event_cb
</UL>

<P><STRONG><a name="[2c3]"></a>lv_subject_init_pointer</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_observer.o(.text.lv_subject_init_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_subject_init_pointer &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sysmon_builtin_init
</UL>

<P><STRONG><a name="[267]"></a>lv_subject_notify</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_observer.o(.text.lv_subject_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_subject_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[561]"></a>lv_subject_set_pointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_observer.o(.text.lv_subject_set_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_subject_set_pointer &rArr; OUTLINED_FUNCTION_7 &rArr; lv_subject_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_update_timer_cb
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_update_timer_cb
</UL>

<P><STRONG><a name="[562]"></a>lv_sysmon_create</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_sysmon.o(.text.lv_sysmon_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_sysmon_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
</UL>

<P><STRONG><a name="[383]"></a>lv_text_get_size</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, lv_text.o(.text.lv_text_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_text_get_size &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[1c2]"></a>lv_text_get_width</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, lv_text.o(.text.lv_text_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_text_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[4c0]"></a>lv_theme_apply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme_recursion
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[3f3]"></a>lv_theme_default_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_get))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
</UL>

<P><STRONG><a name="[3f4]"></a>lv_theme_default_init</STRONG> (Thumb, 2556 bytes, Stack size 72 bytes, lv_theme_default.o(.text.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_theme
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_offset_y
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
</UL>

<P><STRONG><a name="[3f2]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
</UL>

<P><STRONG><a name="[48f]"></a>lv_theme_get_color_primary</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_color_primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_theme_get_color_primary &rArr; lv_theme_get_from_obj &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_constructor
</UL>

<P><STRONG><a name="[563]"></a>lv_theme_get_from_obj</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_from_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_theme_get_from_obj &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>

<P><STRONG><a name="[2d7]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_tick.o(.text.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_monitor_disp_event_cb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2d8]"></a>lv_tick_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_tick.o(.text.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_monitor_disp_event_cb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[185]"></a>lv_tick_inc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_tick.o(.text.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[28b]"></a>lv_timer_create</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_timer.o(.text.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sysmon_builtin_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>

<P><STRONG><a name="[3c8]"></a>lv_timer_delete</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_timer.o(.text.lv_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_timer_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call_cancel
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_timer_cb
</UL>

<P><STRONG><a name="[57c]"></a>lv_timer_get_idle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_get_idle))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_update_timer_cb
</UL>

<P><STRONG><a name="[3c7]"></a>lv_timer_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call_cancel
</UL>

<P><STRONG><a name="[2d6]"></a>lv_timer_pause</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[3f5]"></a>lv_timer_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
</UL>

<P><STRONG><a name="[2d5]"></a>lv_timer_resume</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_resume))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_event_cb
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[3c5]"></a>lv_timer_set_repeat_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>

<P><STRONG><a name="[573]"></a>lv_tlsf_add_pool</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_tlsf_add_pool &rArr; block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[574]"></a>lv_tlsf_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_tlsf.o(.text.lv_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tlsf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[497]"></a>lv_tlsf_create_with_pool</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[463]"></a>lv_tlsf_free</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lv_tlsf.o(.text.lv_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free_core
</UL>

<P><STRONG><a name="[498]"></a>lv_tlsf_get_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tlsf.o(.text.lv_tlsf_get_pool))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[495]"></a>lv_tlsf_malloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_core
</UL>

<P><STRONG><a name="[52b]"></a>lv_tlsf_realloc</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lv_tlsf.o(.text.lv_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc_core
</UL>

<P><STRONG><a name="[49b]"></a>lv_tlsf_walk_pool</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_tlsf.o(.text.lv_tlsf_walk_pool), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor_core
</UL>

<P><STRONG><a name="[90]"></a>lv_trigo_sin</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lv_math.o(.text.lv_trigo_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_angle_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_draw_arc.o(.text.lv_draw_arc_get_area)
<LI> lv_draw_sw_transform.o(.text.lv_draw_sw_transform)
<LI> lv_area.o(.text.lv_point_transform)
</UL>
<P><STRONG><a name="[2c8]"></a>lv_vsnprintf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_sprintf_builtin.o(.text.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_vsnprintf &rArr; _lv_vsnprintf &rArr;  _lv_vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_set_text_vfmt
</UL>

<P><STRONG><a name="[11e]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = main &rArr; lv_port_disp_init &rArr; LCD_Init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_user_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[579]"></a>my_mem_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, malloc.o(.text.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[f4]"></a>my_mem_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, malloc.o(.text.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data.mallco_dev)
</UL>
<P><STRONG><a name="[57a]"></a>my_mem_malloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, malloc.o(.text.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[f5]"></a>my_mem_perused</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, malloc.o(.text.my_mem_perused))
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data.mallco_dev)
</UL>
<P><STRONG><a name="[2dd]"></a>myfree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, malloc.o(.text.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[2de]"></a>mymalloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, malloc.o(.text.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[2df]"></a>mymemcmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, malloc.o(.text.mymemcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mymemcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcmp
</UL>

<P><STRONG><a name="[2e0]"></a>mymemcpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, malloc.o(.text.mymemcpy))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcpy
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>

<P><STRONG><a name="[2e1]"></a>mymemset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, malloc.o(.text.mymemset))
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>

<P><STRONG><a name="[30d]"></a>put_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[12f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6f]"></a>at_user_sdev_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_user.o(.text.at_user_sdev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_user_sdev_read &rArr; Read_UART1_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UART1_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.text.at_user_init)
</UL>
<P><STRONG><a name="[70]"></a>at_user_sdev_print</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_user.o(.text.at_user_sdev_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_user_sdev_print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.text.at_user_init)
</UL>
<P><STRONG><a name="[71]"></a>at_user_sdev_available</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_user.o(.text.at_user_sdev_available))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UART1_Rx_Len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.text.at_user_init)
</UL>
<P><STRONG><a name="[e5]"></a>at_user_AT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_user.o(.text.at_user_AT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_user_AT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e6]"></a>at_user_AT_List</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_user.o(.text.at_user_AT_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_user_AT_List
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e7]"></a>at_user_AT_Reboot</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at_user.o(.text.at_user_AT_Reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_user_AT_Reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e8]"></a>at_user_AT_LED</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, at_user.o(.text.at_user_AT_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_user_AT_LED &rArr; at_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e3]"></a>_at_user_AT_LED_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_user.o(.text._at_user_AT_LED_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _at_user_AT_LED_on
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e4]"></a>_at_user_AT_LED_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_user.o(.text._at_user_AT_LED_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _at_user_AT_LED_off
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_user.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1a9]"></a>LCD_Writ_Bus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lcd_init.o(.text.LCD_Writ_Bus))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>

<P><STRONG><a name="[15f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[160]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[161]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[159]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[15b]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[165]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[166]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[167]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[168]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[169]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[16b]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[16d]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[27a]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[16a]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[16c]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_48</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_48))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[171]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[174]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[176]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>

<P><STRONG><a name="[177]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>

<P><STRONG><a name="[17f]"></a>OUTLINED_FUNCTION_53</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_53))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>OUTLINED_FUNCTION_32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_32
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_57</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_57))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[179]"></a>OUTLINED_FUNCTION_44</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_44))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[17b]"></a>OUTLINED_FUNCTION_58</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_58))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_58 &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[17c]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[25d]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_58
</UL>

<P><STRONG><a name="[195]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[196]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[244]"></a>UART_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[19e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[18e]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[18f]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[190]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[18a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = UART_EndRxTransfer &rArr;  UART_EndRxTransfer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[27d]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[18c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[191]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>UART_Receive_IT</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; Write_UART1_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[14c]"></a>_At_Create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at.o(.text._At_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _At_Create &rArr; at_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Config_no_readString
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_Create
</UL>

<P><STRONG><a name="[281]"></a>_At_Config_no_readString</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, at.o(.text._At_Config_no_readString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _At_Config_no_readString
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Create
</UL>

<P><STRONG><a name="[14e]"></a>_At_Init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, at.o(.text._At_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _At_Init &rArr; _At_Config_no_readString
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_At_Config_no_readString
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_Init
</UL>

<P><STRONG><a name="[48]"></a>_printSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at.o(.text._printSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printSet &rArr; at_memcmp &rArr; mymemcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[49]"></a>_println</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(.text._println))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _println
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[4a]"></a>_print</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at.o(.text._print))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[4b]"></a>_at_printf</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, at.o(.text._at_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _at_printf &rArr; _vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[4d]"></a>_handle</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, at.o(.text._handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _handle &rArr; _paramClear &rArr; at_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_paramClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[4e]"></a>_errorToString</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, at.o(.text._errorToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _errorToString &rArr; at_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[4f]"></a>_setOutputDevice</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at.o(.text._setOutputDevice))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[50]"></a>_setInputDevice</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at.o(.text._setInputDevice))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[51]"></a>_getStateTable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at.o(.text._getStateTable))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[52]"></a>_getParamMaxNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at.o(.text._getParamMaxNum))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[53]"></a>_checkString</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, at.o(.text._checkString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _checkString &rArr; at_memcmp &rArr; mymemcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcmp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[54]"></a>_cutString</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, at.o(.text._cutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _cutString &rArr; strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memcpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_memset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_paramClear
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.text._At_Config_no_readString)
</UL>
<P><STRONG><a name="[287]"></a>_paramClear</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at.o(.text._paramClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _paramClear &rArr; at_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cutString
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle
</UL>

<P><STRONG><a name="[245]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ff]"></a>move_window</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[321]"></a>sync_window</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[341]"></a>get_ldnumber</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[342]"></a>clear_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(.text.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1b3]"></a>find_volume</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = find_volume &rArr; check_fs &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[302]"></a>check_fs</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1b2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; find_volume &rArr; check_fs &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[215]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[343]"></a>follow_path</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[344]"></a>chk_lock</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ff.o(.text.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[323]"></a>dir_register</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[346]"></a>ld_clust</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[347]"></a>remove_chain</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = remove_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[348]"></a>inc_lock</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, ff.o(.text.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[31b]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[363]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[322]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text.mem_set))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[31d]"></a>dir_find</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[269]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text.mem_cpy))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[268]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[31a]"></a>dir_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[31e]"></a>sum_sfn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1fe]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[31c]"></a>dir_next</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[30e]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[20f]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>

<P><STRONG><a name="[34a]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[34b]"></a>clmt_clust</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ff.o(.text.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[34c]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[34e]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[30b]"></a>create_chain</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_chain &rArr; put_fat &rArr; OUTLINED_FUNCTION_4 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[34f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[20e]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[22d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[350]"></a>sync_fs</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[340]"></a>dec_lock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[26d]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[246]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>

<P><STRONG><a name="[217]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
</UL>

<P><STRONG><a name="[1b4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[272]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[253]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mmc_sd.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; SD_RecvData &rArr; SD_GetResponse &rArr; OUTLINED_FUNCTION_2 &rArr; SPI2_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[ae]"></a>disp_flush</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_port_disp.o(.text.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disp_flush &rArr; LCD_DrawPoint &rArr; LCD_Area_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(.text.lv_port_disp_init)
</UL>
<P><STRONG><a name="[218]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[1df]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[1b6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[22f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[219]"></a>get_indev</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_group.o(.text.get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_group
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[468]"></a>lv_group_refocus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[247]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_group.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[360]"></a>focus_next_core</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lv_group.o(.text.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = focus_next_core &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[db]"></a>lv_obj_constructor</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[dc]"></a>lv_obj_destructor</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[dd]"></a>lv_obj_event</STRONG> (Thumb, 1582 bytes, Stack size 168 bytes, lv_obj.o(.text.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lv_obj_event &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_state
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[230]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4c8]"></a>lv_obj_get_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4c9]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[248]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[1e0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_mark_layout_as_dirty &rArr; lv_display_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4ce]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4cf]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d0]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_border_post &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d1]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d2]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4d3]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[4a1]"></a>update_obj_state</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, lv_obj.o(.text.update_obj_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = update_obj_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_state
</UL>

<P><STRONG><a name="[4be]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>

<P><STRONG><a name="[4c1]"></a>lv_obj_construct</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[4ea]"></a>lv_obj_get_style_bg_color_filtered</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_get_style_bg_color_filtered &rArr; OUTLINED_FUNCTION_7 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[1b8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[4ff]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[4bb]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_outline_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4bc]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4bd]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4f7]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[4f6]"></a>lv_obj_get_style_text_color_filtered</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_get_style_text_color_filtered &rArr; OUTLINED_FUNCTION_7 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[4b6]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4b7]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4b9]"></a>lv_obj_get_style_shadow_offset_x</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_offset_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4ba]"></a>lv_obj_get_style_shadow_offset_y</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_offset_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[4b8]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[264]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
</UL>

<P><STRONG><a name="[1e2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[232]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_opa_recursive &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[255]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[256]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[21a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
</UL>

<P><STRONG><a name="[4fe]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[257]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[4fa]"></a>lv_obj_get_style_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4d6]"></a>lv_obj_get_style_space_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_style_space_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_right &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4a8]"></a>lv_obj_get_style_space_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_style_space_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4aa]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4e8]"></a>lv_obj_get_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4ee]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4fb]"></a>lv_obj_get_style_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4ef]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4fc]"></a>lv_obj_get_style_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[508]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4ec]"></a>lv_obj_get_style_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4a9]"></a>lv_obj_get_style_space_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_style_space_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_top &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[200]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4ed]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[4f0]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[20a]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
</UL>

<P><STRONG><a name="[1ba]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
</UL>

<P><STRONG><a name="[201]"></a>lv_obj_get_style_space_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_style_space_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_0 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>

<P><STRONG><a name="[500]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
</UL>

<P><STRONG><a name="[3ad]"></a>layout_update_core</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_layout_apply
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[4ab]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[4ac]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[4ad]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[4ae]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[506]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[507]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[523]"></a>transform_point</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = transform_point &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[20c]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[4fd]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
</UL>

<P><STRONG><a name="[206]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[1bb]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1bc]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[24a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[4d8]"></a>lv_obj_get_style_space_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_space_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_top &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[4d9]"></a>lv_obj_get_style_space_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_space_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[4e1]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
</UL>

<P><STRONG><a name="[234]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
</UL>

<P><STRONG><a name="[4e2]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
</UL>

<P><STRONG><a name="[4db]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[4dc]"></a>lv_obj_get_style_space_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_space_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_right &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[4dd]"></a>lv_obj_get_style_space_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_space_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[4e4]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
</UL>

<P><STRONG><a name="[4e3]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
</UL>

<P><STRONG><a name="[ac]"></a>scroll_x_anim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = scroll_x_anim &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[ad]"></a>scroll_y_anim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = scroll_y_anim &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[208]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[202]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; lv_obj_get_scroll_right &rArr; lv_obj_get_style_space_left &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[26a]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; lv_anim_speed_clamped
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_clamped
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[aa]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[26e]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[512]"></a>scroll_area_into_view</STRONG> (Thumb, 684 bytes, Stack size 64 bytes, lv_obj_scroll.o(.text.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_left
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_right
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_bottom
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_space_top
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[25e]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; lv_area_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[4e0]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[1e3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[4e5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[4e6]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[4e7]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[235]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[236]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[4a2]"></a>trans_delete</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = trans_delete &rArr; lv_anim_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[4a3]"></a>style_has_flag</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_obj_style.o(.text.style_has_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = style_has_flag &rArr; lv_style_prop_has_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
</UL>

<P><STRONG><a name="[384]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>

<P><STRONG><a name="[385]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>

<P><STRONG><a name="[a9]"></a>lv_style_prop_has_flag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_style_prop_has_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_style_prop_has_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_has_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text.lv_obj_refresh_style)
</UL>
<P><STRONG><a name="[50c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[50d]"></a>refresh_children_style</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_obj_style.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[510]"></a>report_style_change_core</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_obj_style.o(.text.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[378]"></a>get_prop_core</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, lv_obj_style.o(.text.get_prop_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop_inlined
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[379]"></a>lv_style_get_prop_inlined</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_style_get_prop_inlined))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_style_get_prop_inlined
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>

<P><STRONG><a name="[24c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[2ba]"></a>get_trans_style</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_trans_style &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[2be]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[68]"></a>trans_anim_ready_cb</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_obj_style.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[69]"></a>trans_anim_start_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_style.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = trans_anim_start_cb &rArr; trans_delete &rArr; lv_anim_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[6a]"></a>trans_anim_cb</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[237]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[1bd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
</UL>

<P><STRONG><a name="[4f1]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>

<P><STRONG><a name="[4c4]"></a>obj_delete_core</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.obj_delete_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = obj_delete_core &rArr;  obj_delete_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call_cancel
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_active_obj
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_remove_all
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[1e5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_delete_core
</UL>

<P><STRONG><a name="[bf]"></a>lv_obj_delete_async_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_delete_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_delete_async_cb &rArr; lv_obj_delete &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_tree.o(.text.obj_delete_core)
</UL>
<P><STRONG><a name="[503]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>

<P><STRONG><a name="[24d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_display_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[298]"></a>wait_for_flushing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(.text.wait_for_flushing))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[1bf]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_refr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[2a1]"></a>lv_color_format_get_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_color_format_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_format_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[2a2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_refr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[2a3]"></a>refr_area_part</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, lv_refr.o(.text.refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = refr_area_part &rArr; refr_obj_and_children &rArr; refr_obj &rArr; lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_wait_for_request
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_clear
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_has_alpha
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_is_double_buffered
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flushing
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_sys
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_top
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_bottom
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_screen_active
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[2a5]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_refr.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_display_refr_timer
</UL>

<P><STRONG><a name="[1e8]"></a>refr_obj</STRONG> (Thumb, 608 bytes, Stack size 192 bytes, lv_refr.o(.text.refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = refr_obj &rArr; lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1e7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
</UL>

<P><STRONG><a name="[52c]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[239]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_refr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; refr_obj_and_children &rArr; refr_obj &rArr; lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[23a]"></a>refr_obj_and_children</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lv_refr.o(.text.refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = refr_obj_and_children &rArr; refr_obj &rArr; lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_screen_active
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[3f1]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_display.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_create
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_send_event
</UL>

<P><STRONG><a name="[8f]"></a>disp_event_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_display.o(.text.disp_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disp_event_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_display.o(.text.lv_display_create)
</UL>
<P><STRONG><a name="[3f6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_display.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_vertical_resolution
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
</UL>

<P><STRONG><a name="[402]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
</UL>

<P><STRONG><a name="[3f9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_arc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
</UL>

<P><STRONG><a name="[3fa]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_arc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
</UL>

<P><STRONG><a name="[3fb]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_arc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
</UL>

<P><STRONG><a name="[3fc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_draw_arc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
</UL>

<P><STRONG><a name="[2a8]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_buf_init_handlers
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_clear
</UL>

<P><STRONG><a name="[60]"></a>buf_copy</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lv_draw_buf.o(.text.buf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = buf_copy &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[61]"></a>buf_clear</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lv_draw_buf.o(.text.buf_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = buf_clear &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[62]"></a>buf_go_to_xy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_draw_buf.o(.text.buf_go_to_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = buf_go_to_xy &rArr; lv_color_format_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[63]"></a>width_to_stride</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_draw_buf.o(.text.width_to_stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = width_to_stride
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[64]"></a>buf_align</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.buf_align))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[65]"></a>buf_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.buf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buf_free &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[66]"></a>buf_malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_buf.o(.text.buf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = buf_malloc &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_buf.o(.text._lv_draw_buf_init_handlers)
</UL>
<P><STRONG><a name="[2ff]"></a>lv_color_format_get_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_draw_buf.o(.text.lv_color_format_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_format_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_go_to_xy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_copy
</UL>

<P><STRONG><a name="[404]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter_dsc_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>

<P><STRONG><a name="[409]"></a>_lv_text_is_marker</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, lv_draw_label.o(.text._lv_text_is_marker))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[21b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_label.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[1c1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_label.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_text_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[406]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_label.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[1e9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_label.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_text_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_iterate_letters
</UL>

<P><STRONG><a name="[3fd]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_border_dsc_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill_dsc_init
</UL>

<P><STRONG><a name="[21d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_draw_add_task &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1c3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1ea]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_finalize_task_creation
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[2ad]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_image_buf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_image_buf_get_transformed_area
</UL>

<P><STRONG><a name="[46b]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_image_decoder.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_create
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
</UL>

<P><STRONG><a name="[39f]"></a>img_width_to_stride</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_image_decoder.o(.text.img_width_to_stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = img_width_to_stride
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_open
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
</UL>

<P><STRONG><a name="[92]"></a>evaluate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_sw.o(.text.evaluate))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init)
</UL>
<P><STRONG><a name="[93]"></a>dispatch</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, lv_draw_sw.o(.text.dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = dispatch &rArr; lv_draw_sw_arc &rArr; lv_draw_sw_border &rArr; OUTLINED_FUNCTION_3 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_rect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_triangle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_label
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg_image
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_alloc_buf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_next_available_task
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_dispatch_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init)
</UL>
<P><STRONG><a name="[328]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch
</UL>

<P><STRONG><a name="[1c5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; get_rounded_area &rArr; lv_trigo_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[21f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_area_move
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[1ec]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[2d4]"></a>add_circle</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lv_draw_sw_arc.o(.text.add_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = add_circle &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[1c6]"></a>get_rounded_area</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.get_rounded_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_rounded_area &rArr; lv_trigo_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[42f]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[1c7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[24f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[221]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_draw_sw_mask_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[23b]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_border.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
</UL>

<P><STRONG><a name="[430]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[431]"></a>shadow_blur_corner</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, lv_draw_sw_box_shadow.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = shadow_blur_corner &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[23c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[432]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[250]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _lv_area_is_out &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[433]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[260]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[1f0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[1fb]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; lv_draw_sw_mask_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[434]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[435]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[26c]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[259]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; lv_draw_sw_mask_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[265]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_box_shadow.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_box_shadow
</UL>

<P><STRONG><a name="[437]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_fill.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
</UL>

<P><STRONG><a name="[399]"></a>img_decode_and_draw</STRONG> (Thumb, 196 bytes, Stack size 128 bytes, lv_draw_sw_img.o(.text.img_decode_and_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = img_decode_and_draw &rArr; img_draw_core &rArr; lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_area
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_image
</UL>

<P><STRONG><a name="[39a]"></a>img_draw_core</STRONG> (Thumb, 1148 bytes, Stack size 216 bytes, lv_draw_sw_img.o(.text.img_draw_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = img_draw_core &rArr; lv_draw_sw_transform &rArr; transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_horizontal_resolution
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_color_format
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_size
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_decode_and_draw
</UL>

<P><STRONG><a name="[39c]"></a>lv_color_format_get_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_draw_sw_img.o(.text.lv_color_format_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_format_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_draw_core
</UL>

<P><STRONG><a name="[94]"></a>draw_letter_cb</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, lv_draw_sw_letter.o(.text.draw_letter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = draw_letter_cb &rArr; lv_draw_sw_border &rArr; OUTLINED_FUNCTION_3 &rArr; lv_draw_sw_blend &rArr; lv_draw_sw_blend_image_to_argb8888 &rArr; rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_width_to_stride
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_border
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_fill
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_border_dsc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_letter.o(.text.lv_draw_sw_label)
</UL>
<P><STRONG><a name="[43c]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_line.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[43d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_sw_line.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[43f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_sw_line.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[2a9]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_sw_mask_cleanup
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_line_points_init
</UL>

<P><STRONG><a name="[96]"></a>lv_draw_mask_line</STRONG> (Thumb, 936 bytes, Stack size 40 bytes, lv_draw_sw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_draw_mask_line &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_mask.o(.text.lv_draw_sw_mask_line_points_init)
</UL>
<P><STRONG><a name="[223]"></a>mask_mix</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[222]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_draw_sw_mask.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[23e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[95]"></a>lv_draw_mask_angle</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, lv_draw_sw_mask.o(.text.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_draw_mask_angle &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_mask_line &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_mask.o(.text.lv_draw_sw_mask_angle_init)
</UL>
<P><STRONG><a name="[1f1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_draw_mask_line &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>

<P><STRONG><a name="[441]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_sw_mask.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_mask_radius_init
</UL>

<P><STRONG><a name="[97]"></a>lv_draw_mask_radius</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, lv_draw_sw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_draw_mask_radius &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_mask.o(.text.lv_draw_sw_mask_radius_init)
</UL>
<P><STRONG><a name="[3ec]"></a>lv_color_format_get_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_draw_sw_transform.o(.text.lv_color_format_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_format_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[442]"></a>transform_point_upscaled</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lv_draw_sw_transform.o(.text.transform_point_upscaled))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = transform_point_upscaled
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[443]"></a>lv_color_mix32</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, lv_draw_sw_transform.o(.text.lv_color_mix32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix32
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rgb888
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[444]"></a>transform_rgb888</STRONG> (Thumb, 546 bytes, Stack size 80 bytes, lv_draw_sw_transform.o(.text.transform_rgb888))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = transform_rgb888 &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix32
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[445]"></a>transform_rgb565a8</STRONG> (Thumb, 556 bytes, Stack size 88 bytes, lv_draw_sw_transform.o(.text.transform_rgb565a8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = transform_rgb565a8
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[c6]"></a>lv_color_16_16_mix</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_draw_sw_transform.o(.text.lv_color_16_16_mix))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_transform.o(.text.transform_rgb565a8)
</UL>
<P><STRONG><a name="[91]"></a>lv_color_16_16_mix</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.lv_color_16_16_mix))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb565
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend_to_rgb565.o(.text.lv_draw_sw_blend_color_to_rgb565)
</UL>
<P><STRONG><a name="[424]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[425]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[426]"></a>rgb888_image_blend</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, lv_draw_sw_blend_to_rgb565.o(.text.rgb888_image_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rgb888_image_blend &rArr; lv_color_24_16_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_16_mix
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_16_16_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[427]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[428]"></a>lv_color_24_16_mix</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_draw_sw_blend_to_rgb565.o(.text.lv_color_24_16_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_24_16_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[429]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[42a]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[42b]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[42c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb565.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb565
</UL>

<P><STRONG><a name="[41b]"></a>lv_color_mix_with_alpha_cache_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_color_mix_with_alpha_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_mix_with_alpha_cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
</UL>

<P><STRONG><a name="[41c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
</UL>

<P><STRONG><a name="[2e7]"></a>lv_color_32_32_mix</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_color_32_32_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix32
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_argb8888
</UL>

<P><STRONG><a name="[8a]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend_to_argb8888.o(.text.lv_color_mix_with_alpha_cache_init)
</UL>
<P><STRONG><a name="[3ea]"></a>lv_color_mix32</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, lv_draw_sw_blend_to_argb8888.o(.text.lv_color_mix32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_32_32_mix
</UL>

<P><STRONG><a name="[2e6]"></a>blend_non_normal_pixel</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_draw_sw_blend_to_argb8888.o(.text.blend_non_normal_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_32_32_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[41f]"></a>rgb888_image_blend</STRONG> (Thumb, 644 bytes, Stack size 88 bytes, lv_draw_sw_blend_to_argb8888.o(.text.rgb888_image_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_32_32_mix &rArr; lv_color_mix32
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_32_32_mix
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_with_alpha_cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[420]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[421]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[422]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[423]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_argb8888.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_argb8888
</UL>

<P><STRONG><a name="[1f2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb888.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
</UL>

<P><STRONG><a name="[225]"></a>lv_color_24_24_mix</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, lv_draw_sw_blend_to_rgb888.o(.text.lv_color_24_24_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_24_24_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
</UL>

<P><STRONG><a name="[224]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb888.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_color_24_24_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_24_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_color_to_rgb888
</UL>

<P><STRONG><a name="[2e8]"></a>blend_non_normal_pixel</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_draw_sw_blend_to_rgb888.o(.text.blend_non_normal_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = blend_non_normal_pixel &rArr; lv_color_24_24_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_24_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
</UL>

<P><STRONG><a name="[42d]"></a>rgb888_image_blend</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, lv_draw_sw_blend_to_rgb888.o(.text.rgb888_image_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rgb888_image_blend &rArr; blend_non_normal_pixel &rArr; lv_color_24_24_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_non_normal_pixel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_24_24_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
</UL>

<P><STRONG><a name="[42e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb888.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_image_to_rgb888
</UL>

<P><STRONG><a name="[57f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_sw_blend_to_rgb888.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb888_image_blend
</UL>

<P><STRONG><a name="[36e]"></a>get_glyph_dsc_id</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[36f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[7d]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[9a]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[9b]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[46e]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_send_event
</UL>

<P><STRONG><a name="[3a0]"></a>indev_reset_core</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_indev.o(.text.indev_reset_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indev_reset_core &rArr; lv_obj_send_event &rArr; lv_event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>

<P><STRONG><a name="[99]"></a>flex_update</STRONG> (Thumb, 716 bytes, Stack size 128 bytes, lv_flex.o(.text.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.lv_flex_init)
</UL>
<P><STRONG><a name="[304]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[358]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[359]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[35b]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[35c]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[353]"></a>lv_obj_get_style_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[354]"></a>lv_obj_get_style_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[352]"></a>find_track_end</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, lv_flex.o(.text.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = find_track_end &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_realloc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[305]"></a>place_content</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_flex.o(.text.place_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = place_content
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[303]"></a>children_repos</STRONG> (Thumb, 1008 bytes, Stack size 128 bytes, lv_flex.o(.text.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = children_repos &rArr; OUTLINED_FUNCTION_1 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[308]"></a>lv_obj_get_style_flex_grow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_flex_grow &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[30a]"></a>get_next_item</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_flex.o(.text.get_next_item))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7a]"></a>lv_obj_get_width_with_margin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_obj_get_width_with_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_get_width_with_margin &rArr; lv_obj_get_style_margin_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[7b]"></a>lv_obj_get_height_with_margin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_obj_get_height_with_margin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_get_height_with_margin &rArr; lv_obj_get_style_margin_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[1f4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[309]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[72]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_with_margin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[73]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_with_margin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[74]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_with_margin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[75]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_with_margin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[76]"></a>lv_area_get_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[77]"></a>lv_area_get_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[9c]"></a>grid_update</STRONG> (Thumb, 2064 bytes, Stack size 144 bytes, lv_grid.o(.text.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_count
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[37a]"></a>get_row_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_row_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_row_dsc &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[37b]"></a>get_row_pos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_row_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_row_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[37c]"></a>get_row_span</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_row_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_row_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1f5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_grid.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[38a]"></a>count_tracks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_grid.o(.text.count_tracks))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[23f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_grid.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[38c]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[38d]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[36a]"></a>get_col_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_col_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_col_dsc &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[36b]"></a>get_col_pos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_col_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_col_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[36c]"></a>get_col_span</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.get_col_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_col_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[38e]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[38f]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[390]"></a>lv_obj_get_style_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[391]"></a>lv_obj_get_style_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[392]"></a>grid_align</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lv_grid.o(.text.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[393]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[394]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[395]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_grid.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[227]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[396]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_grid.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_obj_get_style_margin_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[397]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[398]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[252]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_grid.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1c9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_bin_decoder.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; get_decoder_data &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decoder_data
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[319]"></a>decode_indexed</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lv_bin_decoder.o(.text.decode_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = decode_indexed &rArr; fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[310]"></a>decode_alpha_only</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lv_bin_decoder.o(.text.decode_alpha_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = decode_alpha_only &rArr; fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_format_get_bpp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_malloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_free
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
</UL>

<P><STRONG><a name="[315]"></a>decode_compressed</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, lv_bin_decoder.o(.text.decode_compressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = decode_compressed &rArr; decode_alpha_only &rArr; fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_malloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_free
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_tell
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decoder_data
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_file_at
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_indexed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
</UL>

<P><STRONG><a name="[300]"></a>free_decoder_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_bin_decoder.o(.text.free_decoder_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = free_decoder_data &rArr; lv_fs_close &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_open
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_invalidate_cb
</UL>

<P><STRONG><a name="[89]"></a>cache_invalidate_cb</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, lv_bin_decoder.o(.text.cache_invalidate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cache_invalidate_cb &rArr; free_decoder_data &rArr; lv_fs_close &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_decoder_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bin_decoder.o(.text.lv_bin_decoder_open)
</UL>
<P><STRONG><a name="[313]"></a>fs_read_file_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_bin_decoder.o(.text.fs_read_file_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fs_read_file_at &rArr; lv_fs_read &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bin_decoder_get_area
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_alpha_only
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_indexed
</UL>

<P><STRONG><a name="[1ca]"></a>get_decoder_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_bin_decoder.o(.text.get_decoder_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_decoder_data &rArr; lv_malloc_zeroed &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_compressed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[28c]"></a>anim_mark_list_change</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_anim.o(.text.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_mark_list_change
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[55]"></a>anim_timer</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, lv_anim.o(.text.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = anim_timer &rArr; remove_concurrent_anims &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_concurrent_anims
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_time
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[2d9]"></a>resolve_time</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_anim.o(.text.resolve_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resolve_time
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[2da]"></a>remove_concurrent_anims</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_anim.o(.text.remove_concurrent_anims))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = remove_concurrent_anims &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_anim.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
</UL>

<P><STRONG><a name="[57e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_anim.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_time
</UL>

<P><STRONG><a name="[c1]"></a>convert_speed_to_time</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_anim.o(.text.convert_speed_to_time))
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text.resolve_time)
</UL>
<P><STRONG><a name="[1f6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_anim.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>

<P><STRONG><a name="[3b0]"></a>lv_anim_path_cubic_bezier</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_cubic_bezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_anim_path_cubic_bezier &rArr; lv_cubic_bezier &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cubic_bezier
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
</UL>

<P><STRONG><a name="[3c4]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_area.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>

<P><STRONG><a name="[28f]"></a>lv_point_within_circle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_area.o(.text.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[526]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_area.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>

<P><STRONG><a name="[80]"></a>lv_async_timer_cb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_async.o(.text.lv_async_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_async_timer_cb &rArr; lv_timer_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_async.o(.text.lv_async_call_cancel)
</UL>
<P><STRONG><a name="[291]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_cache_builtin.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_cache_builtin_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_cb
</UL>

<P><STRONG><a name="[56]"></a>empty_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_cache_builtin.o(.text.empty_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = empty_cb &rArr; invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[57]"></a>set_max_size_cb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_cache_builtin.o(.text.set_max_size_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_max_size_cb &rArr; drop_youngest &rArr; invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drop_youngest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[58]"></a>release_cb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_cache_builtin.o(.text.release_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = release_cb &rArr; invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[59]"></a>get_data_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_cache_builtin.o(.text.get_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_data_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[5a]"></a>invalidate_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_cache_builtin.o(.text.invalidate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drop_youngest
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[5b]"></a>find_by_src_cb</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_cache_builtin.o(.text.find_by_src_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_by_src_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[5c]"></a>find_by_data_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_cache_builtin.o(.text.find_by_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_by_data_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[5d]"></a>add_cb</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lv_cache_builtin.o(.text.add_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = add_cb &rArr; drop_youngest &rArr; invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drop_youngest
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memzero
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cache_get_max_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cache_builtin.o(.text._lv_cache_builtin_init)
</UL>
<P><STRONG><a name="[2d3]"></a>drop_youngest</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_cache_builtin.o(.text.drop_youngest))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drop_youngest &rArr; invalidate_cb &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_size_cb
</UL>

<P><STRONG><a name="[1f7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_cache_builtin.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drop_youngest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_cb
</UL>

<P><STRONG><a name="[1cf]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_cache_builtin.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_cb
</UL>

<P><STRONG><a name="[3eb]"></a>lv_color_mix</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lv_color.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[1d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_fs.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
</UL>

<P><STRONG><a name="[1d1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_malloc &rArr; lv_malloc_core &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>

<P><STRONG><a name="[525]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_palette.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
</UL>

<P><STRONG><a name="[49c]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
</UL>

<P><STRONG><a name="[e9]"></a>lv_text_utf8_size</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_text.o(.text.lv_text_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[ea]"></a>lv_text_utf8_next</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, lv_text.o(.text.lv_text_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_text_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[f2]"></a>lv_text_utf8_prev</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_text.o(.text.lv_text_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_text_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data._lv_text_encoded_prev)
</UL>
<P><STRONG><a name="[f0]"></a>lv_text_utf8_get_byte_id</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_text.o(.text.lv_text_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_text_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data._lv_text_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[f1]"></a>lv_text_utf8_get_char_id</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lv_text.o(.text.lv_text_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_text_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data._lv_text_encoded_get_char_id)
</UL>
<P><STRONG><a name="[f3]"></a>lv_text_utf8_get_length</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_text.o(.text.lv_text_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_text_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_text.o(.data._lv_text_get_encoded_length)
</UL>
<P><STRONG><a name="[2c6]"></a>_lv_text_is_a_word</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lv_text.o(.text._lv_text_is_a_word))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_text_get_next_line
</UL>

<P><STRONG><a name="[2ca]"></a>lv_timer_handler_resume</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_handler_resume))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>

<P><STRONG><a name="[49d]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_observer.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_add_observer_obj
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_init_pointer
</UL>

<P><STRONG><a name="[560]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_observer.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_init_pointer
</UL>

<P><STRONG><a name="[266]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_observer.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; lv_subject_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_set_pointer
</UL>

<P><STRONG><a name="[b0]"></a>unsubscribe_on_delete_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_observer.o(.text.unsubscribe_on_delete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsubscribe_on_delete_cb &rArr; lv_observer_remove &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_observer_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_observer.o(.text.lv_subject_add_observer_obj)
</UL>
<P><STRONG><a name="[6b]"></a>perf_update_timer_cb</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_sysmon.o(.text.perf_update_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = perf_update_timer_cb &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_set_pointer
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_idle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text._lv_sysmon_builtin_init)
</UL>
<P><STRONG><a name="[6c]"></a>mem_update_timer_cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_sysmon.o(.text.mem_update_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_update_timer_cb &rArr; lv_mem_monitor &rArr; lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_set_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text._lv_sysmon_builtin_init)
</UL>
<P><STRONG><a name="[6d]"></a>sysmon_backend_init_async_cb</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_sysmon.o(.text.sysmon_backend_init_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sysmon_backend_init_async_cb &rArr; lv_sysmon_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_add_event_cb
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sysmon_create
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_add_observer_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text._lv_sysmon_builtin_init)
</UL>
<P><STRONG><a name="[48d]"></a>lv_layer_sys</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_sysmon.o(.text.lv_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_default
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
</UL>

<P><STRONG><a name="[1d3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_sysmon.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysmon_backend_init_async_cb
</UL>

<P><STRONG><a name="[c2]"></a>perf_monitor_disp_event_cb</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lv_sysmon.o(.text.perf_monitor_disp_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perf_monitor_disp_event_cb &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text.sysmon_backend_init_async_cb)
</UL>
<P><STRONG><a name="[c3]"></a>perf_observer_cb</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lv_sysmon.o(.text.perf_observer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = perf_observer_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_observer_get_target
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text.sysmon_backend_init_async_cb)
</UL>
<P><STRONG><a name="[c4]"></a>mem_observer_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_sysmon.o(.text.mem_observer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mem_observer_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_observer_get_target
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_subject_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sysmon.o(.text.sysmon_backend_init_async_cb)
</UL>
<P><STRONG><a name="[496]"></a>lv_memzero</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_memzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memzero &rArr; lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc_zeroed
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[a6]"></a>lv_mem_walker</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_mem_core_builtin.o(.text.lv_mem_walker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_mem_walker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_mem_core_builtin.o(.text.lv_mem_monitor_core)
</UL>
<P><STRONG><a name="[2cb]"></a>_lv_vsnprintf</STRONG> (Thumb, 1160 bytes, Stack size 96 bytes, lv_sprintf_builtin.o(.text._lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = _lv_vsnprintf &rArr;  _lv_vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>

<P><STRONG><a name="[bd]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text._out_buffer))
<BR>[Address Reference Count : 1]<UL><LI> lv_sprintf_builtin.o(.text.lv_vsnprintf)
</UL>
<P><STRONG><a name="[2cc]"></a>_atoi</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text._atoi))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>

<P><STRONG><a name="[2cd]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>

<P><STRONG><a name="[2ce]"></a>_ntoa_long_long</STRONG> (Thumb, 160 bytes, Stack size 112 bytes, lv_sprintf_builtin.o(.text._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>

<P><STRONG><a name="[1d5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _ntoa_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>

<P><STRONG><a name="[2cf]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_vsnprintf
</UL>

<P><STRONG><a name="[6e]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_sprintf_builtin.o(.text._lv_vsnprintf)
</UL>
<P><STRONG><a name="[2d0]"></a>_ntoa_format</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, lv_sprintf_builtin.o(.text._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
</UL>

<P><STRONG><a name="[1d6]"></a>_ntoa_long</STRONG> (Thumb, 150 bytes, Stack size 112 bytes, lv_sprintf_builtin.o(.text._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ntoa_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2d1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_sprintf_builtin.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>

<P><STRONG><a name="[2eb]"></a>block_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_tlsf.o(.text.block_next))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[bc]"></a>default_walker</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_tlsf.o(.text.default_walker))
<BR>[Address Reference Count : 1]<UL><LI> lv_tlsf.o(.text.lv_tlsf_walk_pool)
</UL>
<P><STRONG><a name="[2f5]"></a>block_insert</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lv_tlsf.o(.text.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>

<P><STRONG><a name="[2ea]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>

<P><STRONG><a name="[2ee]"></a>remove_free_block</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_tlsf.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[575]"></a>adjust_request_size</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_tlsf.o(.text.adjust_request_size))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[2ec]"></a>block_locate_free</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_locate_free &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[2f3]"></a>block_prepare_used</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[2ed]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_tlsf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[2f4]"></a>block_split</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[2f0]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_mark_as_used
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[2ef]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[2f2]"></a>block_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[2e9]"></a>block_absorb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_absorb &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[2f1]"></a>block_merge_next</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[2dc]"></a>apply_theme_recursion</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme_recursion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = apply_theme_recursion &rArr;  apply_theme_recursion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme_recursion
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme_recursion
</UL>

<P><STRONG><a name="[2db]"></a>apply_theme</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme_recursion
</UL>

<P><STRONG><a name="[22b]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[bb]"></a>lv_style_set_pad_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_style_set_pad_all &rArr; lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[564]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[210]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[565]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[566]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[567]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[568]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[213]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_realloc &rArr; lv_realloc_core &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[569]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[20b]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56a]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56b]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56c]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[56f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[570]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[571]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b1]"></a>theme_apply</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, lv_theme_default.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[b2]"></a>style_init_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_theme_default.o(.text.style_init_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = style_init_reset &rArr; lv_style_reset &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[b9]"></a>grey_filter_cb</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_theme_default.o(.text.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = grey_filter_cb &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[ba]"></a>dark_color_filter_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_theme_default.o(.text.dark_color_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dark_color_filter_cb &rArr; lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[25a]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[581]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[582]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[583]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[584]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[585]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[586]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[587]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_default.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[389]"></a>lv_color_mix</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lv_theme_default.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[c7]"></a>lv_arc_constructor</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[c8]"></a>lv_arc_event</STRONG> (Thumb, 1424 bytes, Stack size 256 bytes, lv_arc.o(.text.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_arc_event &rArr; lv_arc_set_value &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[365]"></a>get_center</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lv_arc.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_center &rArr; lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[375]"></a>lv_obj_get_style_arc_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_arc_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[366]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[367]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[368]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[369]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3a9]"></a>knob_get_extra_size</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_arc.o(.text.knob_get_extra_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = knob_get_extra_size &rArr; lv_obj_get_style_shadow_offset_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_y
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_offset_x
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3be]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_arc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[374]"></a>get_knob_area</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, lv_arc.o(.text.get_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_knob_area &rArr; lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3bf]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_arc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[228]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>

<P><STRONG><a name="[3a4]"></a>inv_arc_area</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, lv_arc.o(.text.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>

<P><STRONG><a name="[3a8]"></a>inv_knob_area</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lv_arc.o(.text.inv_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = inv_knob_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>

<P><STRONG><a name="[3c3]"></a>value_update</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_arc.o(.text.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
</UL>

<P><STRONG><a name="[376]"></a>get_angle</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_arc.o(.text.get_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[3ab]"></a>lv_obj_get_style_shadow_offset_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_shadow_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_offset_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
</UL>

<P><STRONG><a name="[3ac]"></a>lv_obj_get_style_shadow_offset_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_obj_get_style_shadow_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_shadow_offset_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
</UL>

<P><STRONG><a name="[c9]"></a>lv_bar_constructor</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_bar.o(.text.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lv_bar_constructor &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[ca]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[cb]"></a>lv_bar_event</STRONG> (Thumb, 1000 bytes, Stack size 368 bytes, lv_bar.o(.text.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_bar_event &rArr; lv_draw_mask_rect &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_rect_dsc_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_is_symmetrical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[3cb]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3cc]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3cd]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3ce]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[81]"></a>lv_area_get_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[82]"></a>lv_area_get_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[3d6]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, lv_bar.o(.text.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>

<P><STRONG><a name="[83]"></a>lv_bar_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[84]"></a>lv_bar_anim_ready</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[cc]"></a>lv_dropdown_constructor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_dropdown_constructor &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[cd]"></a>lv_dropdown_destructor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_dropdown_destructor &rArr; lv_obj_delete &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[ce]"></a>lv_dropdown_event</STRONG> (Thumb, 864 bytes, Stack size 384 bytes, lv_dropdown.o(.text.lv_dropdown_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lv_dropdown_event &rArr; btn_release_handler &rArr; lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image_dsc_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_active_obj
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_image_dsc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_src_get_type
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_image_decoder_get_info
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_image
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[336]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[44d]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[44e]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[451]"></a>position_to_selected</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_dropdown.o(.text.position_to_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2f6]"></a>btn_release_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_dropdown.o(.text.btn_release_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = btn_release_handler &rArr; lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[cf]"></a>lv_dropdownlist_constructor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdownlist_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_dropdownlist_constructor &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[d0]"></a>lv_dropdownlist_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdownlist_destructor))
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[d1]"></a>lv_dropdown_list_event</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, lv_dropdown.o(.text.lv_dropdown_list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_dropdown_list_event &rArr; draw_box &rArr; lv_draw_rect &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[371]"></a>get_id_on_point</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_dropdown.o(.text.get_id_on_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_id_on_point &rArr; lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_dropdown.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[335]"></a>draw_box</STRONG> (Thumb, 154 bytes, Stack size 160 bytes, lv_dropdown.o(.text.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = draw_box &rArr; lv_draw_rect &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[33b]"></a>draw_box_label</STRONG> (Thumb, 210 bytes, Stack size 168 bytes, lv_dropdown.o(.text.draw_box_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = draw_box_label &rArr; lv_draw_label &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[337]"></a>get_label</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_dropdown.o(.text.get_label))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[1f9]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_dropdown.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>

<P><STRONG><a name="[d4]"></a>lv_label_constructor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[d5]"></a>lv_label_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_destructor &rArr; lv_label_dot_tmp_free &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[476]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
</UL>

<P><STRONG><a name="[d6]"></a>lv_label_event</STRONG> (Thumb, 788 bytes, Stack size 184 bytes, lv_label.o(.text.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_label_event &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[477]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[478]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[479]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[212]"></a>lv_obj_get_style_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[47a]"></a>lv_label_revert_dots</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[47b]"></a>lv_label_refr_text</STRONG> (Thumb, 952 bytes, Stack size 168 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_malloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_strlen
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overwrite_anim_property
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
</UL>

<P><STRONG><a name="[47d]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[1fc]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; lv_draw_label &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[48b]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[480]"></a>lv_obj_get_style_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_anim &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[481]"></a>lv_obj_get_style_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_anim_time &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[483]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[484]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[485]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[486]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[487]"></a>overwrite_anim_property</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lv_label.o(.text.overwrite_anim_property))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[204]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; lv_anim_delete &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[488]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[489]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[48a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[a1]"></a>set_ofs_x_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[a2]"></a>set_ofs_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[301]"></a>calculate_x_coordinate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_label.o(.text.calculate_x_coordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = calculate_x_coordinate &rArr; OUTLINED_FUNCTION_6 &rArr; lv_text_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[262]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; lv_text_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_x_coordinate
</UL>

<P><STRONG><a name="[211]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[d7]"></a>lv_led_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_led.o(.text.lv_led_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_led_constructor &rArr; lv_theme_get_color_primary &rArr; lv_theme_get_from_obj &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[d8]"></a>lv_led_event</STRONG> (Thumb, 416 bytes, Stack size 192 bytes, lv_led.o(.text.lv_led_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_led_event &rArr; lv_draw_rect &rArr; OUTLINED_FUNCTION_1 &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[490]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_led.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[491]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_led.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[492]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_led.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[a3]"></a>lv_color_brightness</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_led.o(.text.lv_color_brightness))
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.text.lv_led_event)
</UL>
<P><STRONG><a name="[a4]"></a>lv_color_mix</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lv_led.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.text.lv_led_event)
</UL>
<P><STRONG><a name="[d9]"></a>lv_line_constructor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_line.o(.text.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_line_constructor &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[da]"></a>lv_line_event</STRONG> (Thumb, 452 bytes, Stack size 128 bytes, lv_line.o(.text.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_line_event &rArr; lv_draw_line &rArr; lv_draw_finalize_task_creation &rArr; lv_draw_dispatch &rArr; lv_draw_dispatch_layer &rArr; lv_free &rArr; lv_free_core &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[a5]"></a>resolve_point_coord</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_line.o(.text.resolve_point_coord))
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.text.lv_line_event)
</UL>
<P><STRONG><a name="[de]"></a>lv_roller_constructor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_roller_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_roller_constructor &rArr; lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[df]"></a>lv_roller_event</STRONG> (Thumb, 1168 bytes, Stack size 256 bytes, lv_roller.o(.text.lv_roller_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = lv_roller_event &rArr; lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_vect_recursive
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[377]"></a>get_label</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.get_label))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[52e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_roller.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[1da]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[37d]"></a>get_sel_area</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, lv_roller.o(.text.get_sel_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_sel_area &rArr; lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[381]"></a>get_selected_label_width</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_roller.o(.text.get_selected_label_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_selected_label_width &rArr; lv_text_get_size &rArr; _lv_text_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_text_get_size
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[530]"></a>transform_vect_recursive</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, lv_roller.o(.text.transform_vect_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = transform_vect_recursive &rArr; lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[531]"></a>refr_position</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, lv_roller.o(.text.refr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[37e]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[4eb]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[37f]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[af]"></a>set_y_anim</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_roller.o(.text.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_roller.o(.text.refr_position)
<LI> lv_roller.o(.text.lv_roller_event)
</UL>
<P><STRONG><a name="[e0]"></a>lv_roller_label_event</STRONG> (Thumb, 332 bytes, Stack size 192 bytes, lv_roller.o(.text.lv_roller_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lv_roller_label_event &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_label_class)
</UL>
<P><STRONG><a name="[229]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_roller.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
</UL>

<P><STRONG><a name="[382]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
</UL>

<P><STRONG><a name="[3a2]"></a>inf_normalize</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lv_roller.o(.text.inf_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[c0]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_roller.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = scroll_anim_ready_cb &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[e1]"></a>lv_slider_constructor</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_display_get_dpi
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[e2]"></a>lv_slider_event</STRONG> (Thumb, 1064 bytes, Stack size 280 bytes, lv_slider.o(.text.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_slider_event &rArr; update_knob_pos &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_layer
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_is_symmetrical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[533]"></a>lv_slider_get_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[534]"></a>update_knob_pos</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, lv_slider.o(.text.update_knob_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = update_knob_pos &rArr; lv_obj_remove_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_space_bottom &rArr; OUTLINED_FUNCTION_3 &rArr; lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_flag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_active
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_send_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[1dd]"></a>is_slider_horizontal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_slider.o(.text.is_slider_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_slider_horizontal
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[536]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_slider.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f3]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f4]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f5]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f2]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f9]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4f8]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4e9]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_slider.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; is_slider_horizontal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[240]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_slider.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; position_knob &rArr; lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[537]"></a>lv_slider_set_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_slider_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_slider_set_value &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[539]"></a>lv_slider_set_left_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_slider_set_left_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_slider_set_left_value &rArr; lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; OUTLINED_FUNCTION_0 &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[1fa]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_slider.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_knob_pos
</UL>

<P><STRONG><a name="[241]"></a>position_knob</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lv_slider.o(.text.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = position_knob &rArr; lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop_inlined
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
